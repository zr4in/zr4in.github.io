<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在坚冰还盖着北海的时候</title>
    <link href="/2025/02/25/%E5%9C%A8%E5%9D%9A%E5%86%B0%E8%BF%98%E7%9B%96%E7%9D%80%E5%8C%97%E6%B5%B7%E7%9A%84%E6%97%B6%E5%80%99/"/>
    <url>/2025/02/25/%E5%9C%A8%E5%9D%9A%E5%86%B0%E8%BF%98%E7%9B%96%E7%9D%80%E5%8C%97%E6%B5%B7%E7%9A%84%E6%97%B6%E5%80%99/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2025/02/25/3IyXYHFa4rzDQ2K.png" alt="2025-2-25"></p><p>我自己在北平的生活是十分困苦的。我住在一个叫三眼井的地方，和另外七个人合住一个小房间，我们全体挤在炕上，连呼吸的地方都没有。每逢我翻身都得预先警告身旁的人。不过在公园和故宫的宫址我看到了北国的早春，在坚冰还盖着北海的时候，我看到了怒放的梅花。北京的树木引起了我无穷的欣赏。</p><p>节选自《毛泽东自传》<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[毛泽东自传·第二章〔记录整理：埃德加·斯诺 1936年7月〕](http://www.ziyexing.com/maozedong/zizhuan/maozedong_zizhuan_02.htm)">[1]</span></a></sup></p><hr><p>知乎<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[当坚冰还盖着北海的时候 我看到了怒放的梅花 - 知乎](https://zhuanlan.zhihu.com/p/433186574)">[2]</span></a></sup></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://www.ziyexing.com/maozedong/zizhuan/maozedong_zizhuan_02.htm">毛泽东自传·第二章〔记录整理：埃德加·斯诺 1936年7月〕</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/433186574">当坚冰还盖着北海的时候 我看到了怒放的梅花 - 知乎</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pve安装及配置</title>
    <link href="/2025/01/05/pve%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/01/05/pve%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>咸鱼捡垃圾碰巧捡了个华硕B250M主板+Intel i5 7500，碰巧捡了个拓扑龙的8盘位机箱，碰巧捡了个pcie转sata卡，碰巧捡了个益恒250W flex电源，碰巧捡了好几块机械硬盘。折腾一下pve。</p><blockquote><p>主板+CPU+内存条：￥350</p><p>机箱：280+54-20-90+118&#x3D;￥342</p><p>PCIE扩展卡：￥35</p><p>电源：￥283</p><p>Total：￥1010</p></blockquote><p>还没算硬盘，多少有点贵了。不过相比最新的硬件比如N100什么的，还是便宜不少，N100主板+CPU套装一般就600左右了。</p><h2 id="PVE"><a href="#PVE" class="headerlink" title="PVE"></a>PVE</h2><p>Proxmox VE<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Proxmox Virtual Environment - Open-Source Server Virtualization Platform](https://www.proxmox.com/en/proxmox-virtual-environment/overview)">[1]</span></a></sup>是一个基于debian的linux发行版，开源的服务器虚拟化平台。</p><h2 id="安装PVE"><a href="#安装PVE" class="headerlink" title="安装PVE"></a>安装PVE</h2><p>使用ventoy<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Ventoy](https://www.ventoy.net/cn/index.html)">[2]</span></a></sup>安装，如果ventoy版本是有bug的版本的话，在安装pve的时候有可能会遇到No Device with Valid ISO Found的问题，似乎是ventoy的bug<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[\[SOLVED\] - \[ERROR\] No Device with Valid ISO Found | Proxmox Support Forum](https://forum.proxmox.com/threads/error-no-device-with-valid-iso-found.134510/)">[3]</span></a></sup>，更新到1.0.99版本就行了，但是后面安装好之后，还会有bug，无法启动。表现就是启动的时候会卡在<code>Loading initial ramdisk...</code>，然后又是google一番，发现是pve和ventoy的bug<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Ventoy install of Proxmox 8.1 halts at Loading initial ramdisk | Proxmox Support Forum](https://forum.proxmox.com/threads/ventoy-install-of-proxmox-8-1-halts-at-loading-initial-ramdisk.143196/)">[4]</span></a></sup>。按照帖子上的说法，编辑<code>/etc/default/grub.d/installer.cfg</code>这个文件，删掉<code>voty</code>参数的部分。我的改完之后是<code>GRUB_CMDLINE_LINUX=&quot;$GRUB_CMDLINE_LINUX&quot;</code>，然后运行<code>update-grub</code>更新配置文件，然后就可以了。</p><p><del>世界就是一个巨大的bug，为什么这么多bug。</del></p><p>如果显示器显示登录的界面了（只有命令行），就是安装成功了，然后按照命令行的提示，在另一台电脑上访问web界面就可以了。note：必须用https访问，可以直接安装这个证书或者后面自己配置证书。刚好可以用之前openssl自己创建的证书。</p><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><p>参考<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[佛西博客 - Proxmox VE配置ssl证书](https://foxi.buduanwang.vip/virtualization/256.html/)">[5]</span></a></sup></p><p><img src="https://s2.loli.net/2025/01/07/vNc8PuMqoyEdGHZ.png" alt="image-20250107202845967"></p><h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><p><img src="https://s2.loli.net/2025/01/08/SvCL7mJg3dFsVwq.png" alt="image-20250108194753739"></p><p>上传的时候可以选择保存的文件名，以及哈希算法验证镜像的完整性。</p><h2 id="运行虚拟机-CT"><a href="#运行虚拟机-CT" class="headerlink" title="运行虚拟机&#x2F;CT"></a>运行虚拟机&#x2F;CT</h2><p>右上角创建虚拟机，旁边还有创建CT的选项，根据查到的资料看，CT是进程隔离的技术，虚拟机是完全虚拟出来的操作系统，虚拟机隔离更彻底，但是资源占用也较大，CT进程隔离资源利用效率更高<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[容易被忽略的PVE细节—PVE的tips_NAS存储_什么值得买](https://post.smzdm.com/p/a85g06k7/)">[6]</span></a></sup>。</p><p>先创建个虚拟机试试（创建CT不知道怎么操作）</p><p>输入名称，选择ISO镜像，显卡bios什么的保持默认，磁盘除了大小调整一下，其他的也全部保持默认，cpu核心可以选满，因为按照资料<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[容易被忽略的PVE细节—PVE的tips_NAS存储_什么值得买](https://post.smzdm.com/p/a85g06k7/)">[6]</span></a></sup>说的，核心并不是这个虚拟机独占的，pve会自动根据权重来分配，核心数只是一个性能上限，并且还提到了cpu类型选择host会拥有更好的性能（但是迁移性会变差），不过我也不考虑迁移，就选host。</p><p>创建之后直接启动，就会进入到安装ISO的步骤。（如果想安装其他操作系统，也可以关机然后选择其他ISO文件，<code>qm stop id</code>强制关闭具有特定id的虚拟机）</p><h2 id="PCI直通"><a href="#PCI直通" class="headerlink" title="PCI直通"></a>PCI直通</h2><p>PVE的一个很火的功能，字面意思，PCI设备可以直通到虚拟机，比如显卡或者其他PCIE转接卡。</p><p>这个功能需要在主板BIOS中开启VT-d选项（和VT-x不是一个东西）（Intel）华硕的主板中在高级设置-&gt;北桥-&gt;VT-d，选择enable就可以了。然后按照教程<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="[PVE开启硬件直通功能 – 杂七杂八](https://www.xh86.me/?p=724)">[7]</span></a></sup>操作</p><ol><li><p>首先编辑grub配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf"># /etc/default/grub<br># intel cpu加上intel_iommu=on<br>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on&quot;<br># amd cpu加上amd_iommu=on<br>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet amd_iommu=on&quot;<br></code></pre></td></tr></table></figure><p>然后更新grub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">update-grub<br><span class="hljs-comment"># 但是忘记在哪看到的教程说pve已经不使用update-grub命令了，需要用：</span><br>pve-efiboot-tool refresh<br><span class="hljs-comment"># 保险起见两个都运行一遍得了</span><br></code></pre></td></tr></table></figure></li><li><p>然后加载相应的内核模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> vfio &gt;&gt; /etc/modules<br><span class="hljs-built_in">echo</span> vfio_iommu_type1 &gt;&gt; /etc/modules<br><span class="hljs-built_in">echo</span> vfio_pci &gt;&gt; /etc/modules<br><span class="hljs-built_in">echo</span> vfio_virqfd &gt;&gt; /etc/modules<br></code></pre></td></tr></table></figure><p>然后重启pve，然后应该就可以用了。</p></li></ol><p>在虚拟机关机的状态下，选择添加设备，然后就可以PCI设备直通了。</p><p><img src="https://s2.loli.net/2025/01/08/jMY2hdxbuOKfeCZ.png" alt="image-20250108211143701"></p><h2 id="Linux磁盘加密"><a href="#Linux磁盘加密" class="headerlink" title="Linux磁盘加密"></a>Linux磁盘加密</h2><p>首先使用fdisk对硬盘进行分区<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux磁盘分区、格式化、挂载 - 大数据老司机 - 博客园](https://www.cnblogs.com/liugp/p/16417652.html)">[10]</span></a></sup></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo fdisk /dev/sdX<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs bash">Welcome to fdisk (util-linux 2.39.3).<br>Changes will remain <span class="hljs-keyword">in</span> memory only, <span class="hljs-keyword">until</span> you decide to write them.<br>Be careful before using the write <span class="hljs-built_in">command</span>.<br><br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): m<br><br>Help:<br><br>  GPT<br>   M   enter protective/hybrid MBR<br><br>  Generic<br>   d   delete a partition<br>   F   list free unpartitioned space<br>   l   list known partition types<br>   n   add a new partition<br>   p   <span class="hljs-built_in">print</span> the partition table<br>   t   change a partition <span class="hljs-built_in">type</span><br>   v   verify the partition table<br>   i   <span class="hljs-built_in">print</span> information about a partition<br><br>  Misc<br>   m   <span class="hljs-built_in">print</span> this menu<br>   x   extra functionality (experts only)<br><br>  Script<br>   I   load disk layout from sfdisk script file<br>   O   dump disk layout to sfdisk script file<br><br>  Save &amp; Exit<br>   w   write table to disk and <span class="hljs-built_in">exit</span><br>   q   quit without saving changes<br><br>  Create a new label<br>   g   create a new empty GPT partition table<br>   G   create a new empty SGI (IRIX) partition table<br>   o   create a new empty MBR (DOS) partition table<br>   s   create a new empty Sun partition table<br><br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): n<br>Partition number (1-128, default 1):<br>First sector (34-23437770718, default 2048):<br>Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-23437770718, default 23437768703): +4T<br><br>Created a new partition 1 of <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;Linux filesystem&#x27;</span> and of size 4 TiB.<br>Partition <span class="hljs-comment">#1 contains a LVM2_member signature.</span><br><br>Do you want to remove the signature? [Y]es/[N]o: y<br><br>The signature will be removed by a write <span class="hljs-built_in">command</span>.<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): n<br>Partition number (2-128, default 2):<br>First sector (8589936640-23437770718, default 8589936640):<br>Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (8589936640-23437770718, default 23437768703): +4T<br><br>Created a new partition 2 of <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;Linux filesystem&#x27;</span> and of size 4 TiB.<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): n<br>Partition number (3-128, default 3):<br>First sector (17179871232-23437770718, default 17179871232):<br>Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (17179871232-23437770718, default 23437768703):<br><br>Created a new partition 3 of <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;Linux filesystem&#x27;</span> and of size 2.9 TiB.<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): w<br>The partition table has been altered.<br>Calling ioctl() to re-read partition table.<br>Syncing disks.<br></code></pre></td></tr></table></figure><p>然后根据教程对分区进行加密<sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux 系统创建加密磁盘并自动挂载 | Sink 的笔记本](https://ldsink.com/articles/how-to-create-crypt-disk-and-auto-mount/)">[11]</span></a></sup><sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux 磁盘加密和自动挂载 - 阿蛮君博客](https://www.amjun.com/2590.html)">[12]</span></a></sup></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 全程root操作</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/urandom of=/etc/cryptfs.key bs=1k count=4<br>cryptsetup luksFormat /dev/sda1 /etc/cryptfs.key<br><span class="hljs-comment"># 然后需要输入大写的YES</span><br><span class="hljs-comment"># 打开加密的分区</span><br>cryptsetup open /dev/sdc1 sdc1 --key-file=/etc/cryptfs.key<br><span class="hljs-comment"># 在打开的分区上创建文件系统</span><br>mkfs.ext4 /dev/mapper/sdc1<br></code></pre></td></tr></table></figure><p>打开的分区会出现在<code>/dev/mapper</code>中</p><p><img src="https://s2.loli.net/2025/01/08/YiL63UoFOI4gzuk.png" alt="image-20250108220027245"></p><p>通过更改<code>/etc/crypttab</code>配置文件来实现自动解密，使用分区的UUID来识别分区可以避免因为启动顺序不同造成的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 先确认分区的UUID</span><br>sudo blkid<br>sudo nano /etc/crypttab<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf"># &lt;target name&gt; &lt;source device&gt;                            &lt;key file&gt;      &lt;options&gt;<br>sdc1            UUID=&lt;partition uuid&gt;  /etc/cryptfs.key<br></code></pre></td></tr></table></figure><p>然后更改<code>/etc/fstab</code>来实现自动挂载，因为<code>crypttab</code>已经固定了target name了，所以应该也不需要uuid来挂载了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># &lt;file system&gt;  &lt;mount point&gt;  &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><br>/dev/mapper/sdc1 /some/path      ext4   defaults        0       0<br></code></pre></td></tr></table></figure><h2 id="Linux配置磁盘阵列"><a href="#Linux配置磁盘阵列" class="headerlink" title="Linux配置磁盘阵列"></a>Linux配置磁盘阵列</h2><p>组件RAID5阵列需要至少三个硬盘<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux下构建RAID5 - 流年似水zlw - 博客园](https://www.cnblogs.com/zlw-xyz/p/14075476.html)">[8]</span></a></sup><sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux下构建RAID5 | 《Linux就该这么学》](https://www.linuxprobe.com/linux-raid5.html)">[9]</span></a></sup></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mdadm -C /dev/md0 -l 5 -n 3 -x 1 /dev/sda /dev/sdb /dev/sdc /dev/sdd<br></code></pre></td></tr></table></figure><p><code>-x 1</code>表示有一块热备盘，如果没有可以直接去掉</p><p>配置mdadm每次重启都能识别到raid阵列，需要更改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 注意需要有写权限</span><br><span class="hljs-comment"># mdadm --detail --scan --verbose /dev/md0 &gt; /etc/mdadm.conf</span><br>mdadm --detail --scan --verbose /dev/md0 &gt;&gt; /etc/mdadm/mdadm.conf<br></code></pre></td></tr></table></figure><p>然后根据这个配置文件的提示，还需要运行<code>update-initramfs -u</code>命令</p><p>然后就可以创建文件系统格式化，然后挂载了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mkfs.ext4 /dev/md0<br>sudo mount /dev/md0 /some/path<br></code></pre></td></tr></table></figure><p>如果需要开机自动挂载，需要更改fstab</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf"># /etc/fstab<br>/dev/md0  /some/path  ext4 defaults 0 0<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.proxmox.com/en/proxmox-virtual-environment/overview">Proxmox Virtual Environment - Open-Source Server Virtualization Platform</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.ventoy.net/cn/index.html">Ventoy</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://forum.proxmox.com/threads/error-no-device-with-valid-iso-found.134510/">[SOLVED] - [ERROR] No Device with Valid ISO Found | Proxmox Support Forum</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://forum.proxmox.com/threads/ventoy-install-of-proxmox-8-1-halts-at-loading-initial-ramdisk.143196/">Ventoy install of Proxmox 8.1 halts at Loading initial ramdisk | Proxmox Support Forum</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://foxi.buduanwang.vip/virtualization/256.html/">佛西博客 - Proxmox VE配置ssl证书</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://post.smzdm.com/p/a85g06k7/">容易被忽略的PVE细节—PVE的tips_NAS存储_什么值得买</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://www.xh86.me/?p=724">PVE开启硬件直通功能 – 杂七杂八</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://www.cnblogs.com/zlw-xyz/p/14075476.html">Linux下构建RAID5 - 流年似水zlw - 博客园</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://www.linuxprobe.com/linux-raid5.html">Linux下构建RAID5 | 《Linux就该这么学》</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span><a href="https://www.cnblogs.com/liugp/p/16417652.html">Linux磁盘分区、格式化、挂载 - 大数据老司机 - 博客园</a><a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span><a href="https://ldsink.com/articles/how-to-create-crypt-disk-and-auto-mount/">Linux 系统创建加密磁盘并自动挂载 | Sink 的笔记本</a><a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span><a href="https://www.amjun.com/2590.html">Linux 磁盘加密和自动挂载 - 阿蛮君博客</a><a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>pve</tag>
      
      <tag>nas</tag>
      
      <tag>vm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>appium inspector配置</title>
    <link href="/2025/01/03/appium-inspector%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/01/03/appium-inspector%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="appium以及appium-inspector安装及配置"><a href="#appium以及appium-inspector安装及配置" class="headerlink" title="appium以及appium-inspector安装及配置"></a>appium以及appium-inspector安装及配置</h2><p>appium需要使用比较新的版本的nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -<br>sudo apt install -y nodejs<br>node -v<br>npm -v<br><br>sudo apt install openjdk-17-jdk<br><br>wget https://dl.google.com/android/repository/commandlinetools-linux-6858069_latest.zip<br>sudo unzip commandlinetools-linux-6858069_latest.zip<br><br>sudo <span class="hljs-built_in">ln</span> -s /path/to/sdkmanager /bin/sdkmanager<br>sudo sdkmanager --proxy=http --proxy_host=host --proxy_port=port --sdk_root=/opt/android-sdk <span class="hljs-string">&quot;platforms;android-28&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">sudo sdkmanager --proxy=http --proxy_host=host --proxy_port=port --sdk_root=/opt/android-sdk &quot;</span>platform-tools<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">sudo ln -s /path/to/adb /bin/adb</span><br><span class="hljs-string">sudo npm config set proxy http://your-proxy-server:port</span><br><span class="hljs-string">sudo npm install -g appium</span><br><span class="hljs-string">appium driver install uiautomator2</span><br></code></pre></td></tr></table></figure><p>子网内通过adb连接到手机，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb connect <span class="hljs-variable">$ip</span>:<span class="hljs-variable">$port</span><br></code></pre></td></tr></table></figure><p>获取包名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell pm list packages | grep xxx<br></code></pre></td></tr></table></figure><p>获取启动activity：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell monkey -p com.package.name -c android.intent.category.LAUNCHER -v -v 0 | grep  Using<br></code></pre></td></tr></table></figure><p>appium服务器中运行<code>appium</code>启动服务，然后配置appium-inspector：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;platformName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Android&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;appium:platformVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;appium:deviceName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;device-serial&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;appium:appPackage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.package.name&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;appium:appActivity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.package.name.Activity&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;appium:automationName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UiAutomator2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="ADB常用命令"><a href="#ADB常用命令" class="headerlink" title="ADB常用命令"></a>ADB常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb devices<br><span class="hljs-comment"># 列出已连接的设备</span><br><br>adb connect 192.168.1.111:5555<br><span class="hljs-comment"># 连接到局域网的adb设备</span><br><br>adb -s serial-0001 shell <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 通过adb连接的设备（连接多个设备时通过-s参数指定设备编号）中执行ls命令</span><br><span class="hljs-comment"># 如果只有一个adb设备，-s加不加无所谓</span><br><br>adb shell pm list packages | grep xxx<br>adb shell pm list packages | findstr xxx<br><span class="hljs-comment"># 列出所有安装的包，重定向输出然后正则匹配，linux用grep，windows用findstr</span><br><br>adb shell /system/bin/screencap -p /sdcard/ss.png<br>adb pull /sdcard/ss.png .<br><span class="hljs-comment"># adb获取设备截图并pull到本地</span><br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/lixuefang69/p/15425471.html">利用adb命令对手机截图保存到电脑 - 曦涵 - 博客园</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>adb</tag>
      
      <tag>appium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker常用命令以及环境工作配置备份</title>
    <link href="/2024/12/30/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%B7%A5%E4%BD%9C%E9%85%8D%E7%BD%AE%E5%A4%87%E4%BB%BD/"/>
    <url>/2024/12/30/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%B7%A5%E4%BD%9C%E9%85%8D%E7%BD%AE%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -itd -p 10022:22 -v ~/data:/root/data --name my_container ubuntu:22.04 bash<br><span class="hljs-comment"># docker运行容器，添加端口映射和目录映射</span><br><br>docker ps -a<br><span class="hljs-comment"># 列出所有的容器，-a表示不管有没有在运行</span><br><br>docker <span class="hljs-built_in">exec</span> -it my_container bash<br><span class="hljs-comment"># docker进入容器并获取一个可交互的终端</span><br><br>docker start my_container<br><span class="hljs-comment"># start启动容器，stop关闭，restart重启</span><br><br>docker <span class="hljs-built_in">rm</span> -f my_container<br><span class="hljs-comment"># 删除某个容器，-f强制删除（不用手动关闭容器）</span><br><br>docker inspect my_container<br><span class="hljs-comment"># docker查看容器的信息（比如网络什么的）</span><br><br>docker network <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 列出docker的网络</span><br><br>docker network inspcet network_name_or_id<br><span class="hljs-comment"># docker查看该网络的信息（比如有哪些容器在这个网络上）</span><br><br>docker nerwork <span class="hljs-built_in">rm</span> network_name<br><span class="hljs-comment"># 删除某个网络（需要重启docker）</span><br></code></pre></td></tr></table></figure><h2 id="docker网段与外部冲突"><a href="#docker网段与外部冲突" class="headerlink" title="docker网段与外部冲突"></a>docker网段与外部冲突</h2><p>如果 Docker 的默认网段与外部网络网段发生冲突，可以通过以下步骤进行更改：</p><p><strong>编辑 Docker 配置文件</strong>：通常，Docker 的配置文件位于 <code>/etc/docker/daemon.json</code>。如果该文件不存在，可以创建它。</p><p><strong>配置自定义网段</strong>：在 <code>daemon.json</code> 文件中添加或修改以下内容来设置一个新的网段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;bip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;172.30.0.1/16&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里的 <code>172.30.0.1/16</code> 是一个示例网段，可以根据需要选择一个不冲突的私有网段。</p><p><strong>重启 Docker 服务</strong>：保存配置文件后，重启 Docker 服务以应用更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p><strong>验证更改</strong>：重启后，可以运行以下命令来验证 Docker 是否使用了新的网段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network inspect bridge<br></code></pre></td></tr></table></figure><p>检查输出中的 <code>Subnet</code> 信息是否与配置一致。这样设置后，Docker 将使用你指定的网段，从而避免与外部网络冲突。如果<code>ip r</code>发现还有对应的路由表，可能需要<code>docker network rm n_name</code>手动删除无用的网络。</p><h2 id="配置常用环境"><a href="#配置常用环境" class="headerlink" title="配置常用环境"></a>配置常用环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUB_KEYS=(<span class="hljs-string">&quot;pub key1&quot;</span> <span class="hljs-string">&quot;pub key2&quot;</span>)<br>apt update &amp;&amp; apt install ca-certificates -y<br><span class="hljs-built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.backup<br><span class="hljs-built_in">cat</span> &gt; /etc/apt/sources.list &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="hljs-string">EOF</span><br>apt update &amp;&amp; apt upgrade -y &amp;&amp; apt install nano git wget curl openssh-server zsh -y<br>sed -i <span class="hljs-string">&quot;s/#PubkeyAuthentication.*$/PubkeyAuthentication\ yes/g&quot;</span> /etc/ssh/sshd_config<br>sed -i <span class="hljs-string">&quot;s/#PasswordAuthentication.*$/PasswordAuthentication\ no/g&quot;</span> /etc/ssh/sshd_config<br>sed -i <span class="hljs-string">&quot;s/#AuthorizedKeysFile.*$/AuthorizedKeysFile\ .ssh\/authorized_keys/g&quot;</span> /etc/ssh/sshd_config<br><span class="hljs-keyword">if</span> [ ! -d ~/.ssh/ ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">mkdir</span> ~/.ssh<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ ! -f ~/.ssh/authorized_keys ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">touch</span> ~/.ssh/authorized_keys<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">chmod</span> 600 ~/.ssh/authorized_keys<br><span class="hljs-keyword">for</span> pub <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PUB_KEYS[@]&#125;</span>&quot;</span>;<br><span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$pub</span> &gt;&gt; ~/.ssh/authorized_keys<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;service ssh start&quot;</span> &gt;&gt; ~/.bashrc<br>usermod -s `<span class="hljs-built_in">which</span> zsh` root<br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br>sed -i <span class="hljs-string">&quot;s/^plugins=(git.*$/plugins=(git zsh-autosuggestions zsh-syntax-highlighting)/g&quot;</span> ~/.zshrc<br>git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br>sed -i <span class="hljs-string">&quot;s/^ZSH_THEME=.*$/ZSH_THEME=powerlevel10k\/powerlevel10k/g&quot;</span> ~/.zshrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker配置transmission</title>
    <link href="/2024/12/16/docker%E9%85%8D%E7%BD%AEtransmission/"/>
    <url>/2024/12/16/docker%E9%85%8D%E7%BD%AEtransmission/</url>
    
    <content type="html"><![CDATA[<p>有一些网站会限制使用的bt客户端的版本，然后archlinux由于滚动更新，软件都是最新版本的，所以docker就非常好用。</p><h2 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">transmission:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">linuxserver/transmission:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">transmission</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Etc/UTC</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TRANSMISSION_WEB_HOME=</span> <span class="hljs-comment">#可选</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">USER=</span> <span class="hljs-comment">#可选，此处设置WebUI账户</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PASS=</span> <span class="hljs-comment">#可选，此处设置WebUI密码</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">WHITELIST=</span> <span class="hljs-comment">#可选， 指定可访问WebUI的白名单的ip列表，逗号分隔</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">RPCPORT=</span> <span class="hljs-comment">#可选，此处设置WebUI端口，默认为9091</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PEERPORT=</span> <span class="hljs-comment">#可选，此处设置种子链接端口，默认为51413</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">HOST_WHITELIST=</span> <span class="hljs-comment">#可选</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/path/to/config:/config</span> <span class="hljs-comment">#挂载TR设置文件存储</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/path/to/downloads:/downloads</span> <span class="hljs-comment">#挂载TR下载文件存储</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/path/to/watch:/watch</span> <span class="hljs-comment">#挂载TR种子监听文件存储</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9091</span><span class="hljs-string">:9091</span> <span class="hljs-comment">#NAT转发RPC端口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">51413</span><span class="hljs-string">:51413</span> <span class="hljs-comment">#NAT转发PEER端口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">51413</span><span class="hljs-string">:51413/udp</span> <span class="hljs-comment">#NAT转发PEER(UDP)端口</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><p>配置文件来自<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[[Docker\]Transmission（官方🐋Docker版）安装 - invites.fun](https://invites.fun/d/694)">[1]</span></a></sup>（有一些修改）。linuxserver官方文档<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[linuxserver/transmission - Docker Image | Docker Hub](https://hub.docker.com/r/linuxserver/transmission)">[2]</span></a></sup></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">transmission:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">linuxserver/transmission:4.0.5</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">transmission</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Etc/UTC</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TRANSMISSION_WEB_HOME=/config/web/src</span> <span class="hljs-comment">#配置美化之后的webui</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">USER=username_of_webui</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PASS=password_of_webui</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">WHITELIST=</span> <span class="hljs-comment">#可选， 指定可访问WebUI的白名单的ip列表，逗号分隔</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">RPCPORT=</span> <span class="hljs-comment">#可选，此处设置WebUI端口，默认为9091</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PEERPORT=</span> <span class="hljs-comment">#可选，此处设置种子链接端口，默认为51413</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">HOST_WHITELIST=</span> <span class="hljs-comment">#可选</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/tr/config:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/tr/downloads:/downloads</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/tr/watch:/watch</span><br>    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">host</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><p>网络模式改成了<code>host</code>，然后增加了web_home，可以用来改变UI</p><p>从release页面<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Releases · ronggang/transmission-web-control](https://github.com/ronggang/transmission-web-control/releases)">[3]</span></a></sup>下载webui的源代码，然后确保把解压后的<code>src</code>文件夹中的内容放到之前配置的<code>/config/web/src</code>（因为<code>config</code>文件夹已经映射过了，所以也就是<code>home/tr/config/web/src</code>）中。</p><p>然后<code>docker compose up -d</code>即可。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>[<a href="https://invites.fun/d/694">Docker]Transmission（官方🐋Docker版）安装 - invites.fun</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hub.docker.com/r/linuxserver/transmission">linuxserver&#x2F;transmission - Docker Image | Docker Hub</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/ronggang/transmission-web-control/releases">Releases · ronggang&#x2F;transmission-web-control</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>linuxserver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker配置各种代理</title>
    <link href="/2024/12/09/docker%E9%85%8D%E7%BD%AE%E5%90%84%E7%A7%8D%E4%BB%A3%E7%90%86/"/>
    <url>/2024/12/09/docker%E9%85%8D%E7%BD%AE%E5%90%84%E7%A7%8D%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>参考总结自<a href="https://skywt.cn/blog/">SkyWT</a>的博客<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Docker 代理配置方法合集](https://skywt.cn/blog/docker-proxy-configuration/)">[1]</span></a></sup></p><h2 id="Docker-daemon代理"><a href="#Docker-daemon代理" class="headerlink" title="Docker daemon代理"></a>Docker daemon代理</h2><p><strong>问题</strong>：从DockerHub拉取镜像时可能出现网络问题。</p><p><strong>解决方案</strong>：在 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code> 编写 systemd 配置，配置 HTTP 和 HTTPS 代理：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTP_PROXY=http://127.0.0.1:1080&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTPS_PROXY=http://127.0.0.1:1080&quot;</span><br></code></pre></td></tr></table></figure><p>配置完之后重新加载配置文件并重启docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p>note：不同的发行版中service文件的位置不一样，在archlinux中位于<code>/usr/lib/systemd/system/docker.service</code></p><h2 id="容器内代理"><a href="#容器内代理" class="headerlink" title="容器内代理"></a>容器内代理</h2><p><strong>问题</strong>：配置每个容器的代理环境变量较繁琐。<br><strong>解决方案</strong>：在 <code>~/.docker/config.json</code> 中设置全局代理配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;proxies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;httpProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://example:1080&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpsProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://example:1080&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;noProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*.test.example.com,.example.org,127.0.0.0/8,192.168.0.0/16&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>note：使用sudo启动的容器，配置文件按照<code>/root/.docker/config.json</code>，并且，这里的proxy如果设置为<code>localhost</code>或者<code>127.0.0.1</code>，指的是容器自己的地址。</p><h2 id="Build代理"><a href="#Build代理" class="headerlink" title="Build代理"></a>Build代理</h2><p><strong>问题</strong>：docker build 时网络问题。</p><p><strong>解决方案</strong>：使用<code>docker build</code>时添加参数<code>--network=host</code>设置build网络。或者在<code>docker-compose.yml</code>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>  <span class="hljs-attr">network:</span> <span class="hljs-string">host</span><br>  <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile</span><br></code></pre></td></tr></table></figure><p>然后在<code>Dockerfile</code>中设定环境变量：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENV</span> http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:1080&quot;</span><br><span class="hljs-keyword">ENV</span> HTTP_PROXY=<span class="hljs-string">&quot;http://127.0.0.1:1080&quot;</span><br><span class="hljs-keyword">ENV</span> https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:1080&quot;</span><br><span class="hljs-keyword">ENV</span> HTTPS_PROXY=<span class="hljs-string">&quot;http://127.0.0.1:1080&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://skywt.cn/blog/docker-proxy-configuration/">Docker 代理配置方法合集</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.docker.com/blog/what-does-docker-do/">What Does Docker Do? | Docker</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用openssl签发ssl证书</title>
    <link href="/2024/12/07/%E4%BD%BF%E7%94%A8openssl%E7%AD%BE%E5%8F%91ssl%E8%AF%81%E4%B9%A6/"/>
    <url>/2024/12/07/%E4%BD%BF%E7%94%A8openssl%E7%AD%BE%E5%8F%91ssl%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<p>如果想给自己的服务用上ssl，需要证书服务，一般都需要购买才行，但是其实主要是信任的问题，所以完全可以用自己的自签名的证书（只要自己想办法确认私钥不会泄露）</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>openssl生成rsa秘钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl genrsa -out root.rsa.key 2048<br></code></pre></td></tr></table></figure><p>使用秘钥生成证书申请</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl req -new -key root.rsa.key -out root.rsa.csr<br></code></pre></td></tr></table></figure><p>再用生成的秘钥自己给自己签名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl x509 -req -<span class="hljs-keyword">in</span> root.rsa.csr -out root.crt -signkey root.rsa.key -days 365<br></code></pre></td></tr></table></figure><p>如此生成了一个有效期一年的自签名证书。</p><p>如果要在不同的域名（或者IP）上使用ssl，还需要针对每一个主机各自签发证书。步骤类似的</p><blockquote><p>note：按照接下来这几步生成的证书现在浏览器已经不认了，建议直接跳转到后两小节Subject Alternatice Name</p><p>note2：由于安卓手机对安装的CA证书有限制，所以需要在生成root证书时，加上<code>CA:TRUE</code>的扩展字段，生成这类证书的过程参考这里<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://foreverzmyer.hashnode.dev/cert">[9]</span></a></sup>。</p></blockquote><p>生成秘钥</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl genrsa -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.rsa.key <span class="hljs-number">2048</span><br></code></pre></td></tr></table></figure><p>使用秘钥生成证书申请</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl req -new -key server.rsa.key -out server.rsa.csr<br></code></pre></td></tr></table></figure><p>再用刚刚的根证书对这个证书申请签名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl x509 -req -<span class="hljs-keyword">in</span> server.rsa.csr -out server.crt -days 365 -CA root.crt -CAkey root.rsa.key -CAcreateserial -sha256<br></code></pre></td></tr></table></figure><p>如此签发了一个有效期一年的证书。</p><h2 id="but"><a href="#but" class="headerlink" title="but"></a>but</h2><p>但是目前测试在客户端（Edge on Windows11）上试了一下还是会报错，虽然windows已经把root.crt安装到可信的根证书颁发机构。Chrome报错是<code>net::ERR_CERT_COMMON_NAME_INVALID</code></p><h2 id="Subject-Alternative-Name"><a href="#Subject-Alternative-Name" class="headerlink" title="Subject Alternative Name"></a>Subject Alternative Name</h2><p>根据IdeaWand<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="[使用OpenSSL生成含有Subject Alternative Name(SAN)的证书 | IdeaWand](https://blog.ideawand.com/2017/11/22/build-certificate-that-support-Subject-Alternative-Name-SAN/)">[7]</span></a></sup>的说法，现在的浏览器基本上都放弃了CommonName。转而使用Subject Alternative Name，所以需要生成带有SAN的证书。</p><p>所以在生成服务器的证书的时候需要指定这些extension。根据zmc<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="[OpenSSL证书通过Subject Alternative Name扩展字段扩展证书支持的域名 - 人艰不拆_zmc - 博客园](https://www.cnblogs.com/zhangmingcheng/p/18412749)">[8]</span></a></sup>的教程</p><p>首先生成根证书的过程是不变的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl genrsa -out root.rsa.key 2048<br>openssl req -new -key root.rsa.key -out root.rsa.csr<br>openssl x509 -req -<span class="hljs-keyword">in</span> root.rsa.csr -out root.crt -signkey root.rsa.key -days 365<br></code></pre></td></tr></table></figure><p>然后生成服务器证书的秘钥也是不变的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl genrsa -out server.rsa.key 2048<br></code></pre></td></tr></table></figure><p>然后需要编写配置文件，在配置文件中指定一些extension字段，server.conf</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[ req ]</span><br><span class="hljs-attr">default_bits</span> = <span class="hljs-number">2048</span><br><span class="hljs-attr">prompt</span> = <span class="hljs-literal">no</span><br><span class="hljs-attr">default_md</span> = sha256<br><span class="hljs-attr">req_extensions</span> = v3_ext<br><span class="hljs-attr">distinguished_name</span> = dn<br><br><span class="hljs-section">[ dn ]</span><br><span class="hljs-attr">C</span> = CN<br><span class="hljs-attr">ST</span> = Province Name<br><span class="hljs-attr">L</span> = City<br><span class="hljs-attr">O</span> = Organization Name<br><span class="hljs-attr">OU</span> = Organization Unit Name<br><span class="hljs-attr">CN</span> = Common Name<br><br><span class="hljs-section">[ req_ext ]</span><br><span class="hljs-attr">subjectAltName</span> = @alt_names<br><br><span class="hljs-section">[ alt_names ]</span><br><span class="hljs-attr">DNS.1</span> = DNS name <span class="hljs-number">1</span> <span class="hljs-comment"># 域名</span><br><span class="hljs-attr">DNS.2</span> = DNS name <span class="hljs-number">2</span> <span class="hljs-comment"># 另一个域名</span><br><span class="hljs-attr">IP.1</span> = IP <span class="hljs-number">1</span> <span class="hljs-comment"># IP地址</span><br><span class="hljs-attr">IP.2</span> = IP <span class="hljs-number">2</span> <span class="hljs-comment"># 另一个IP地址</span><br><br><span class="hljs-section">[ v3_ext ]</span><br><span class="hljs-attr">basicConstraints</span>=CA:<span class="hljs-literal">FALSE</span><br><span class="hljs-comment"># keyUsage=keyEncipherment,dataEncipherment</span><br><span class="hljs-comment"># extendedKeyUsage=serverAuth,clientAuth</span><br><span class="hljs-attr">subjectAltName</span>=@alt_names<br></code></pre></td></tr></table></figure><p>注释掉的行大概是一些控制证书的用途的字段，不知道是哪一行导致的不能用于https，所以就都注释掉了。</p><p>然后依赖这个配置文件，生成服务器证书的申请</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl req -new -key server.rsa.key -out server.rsa.csr -config server.conf<br></code></pre></td></tr></table></figure><p>然后使用自签名的根证书，签发服务器证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl x509 -req -<span class="hljs-keyword">in</span> server.rsa.csr -out server.crt -days 365 -CA root.crt -CAkey root.rsa.key -CAcreateserial -sha256 -extensions v3_ext -extfile server.conf<br></code></pre></td></tr></table></figure><p>然后得到的<code>server.crt</code>就是有效的证书，然后就<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Apache配置ssl证书-实现https访问 | Galiyy'blog](https://galiyy.github.io/2020/03/31/Apache配置ssl证书-实现https访问/)">[6]</span></a></sup>可以用于https了。</p><p><img src="https://s2.loli.net/2024/12/07/mNcDsAxhnGFkXrI.png" alt="image-20241207215657035"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gist.github.com/liuguangw/4d4b87b750be8edb700ff94c783b1dd4">使用openssl制作自定义CA、自签名ssl证书</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://ningyu1.github.io/site/post/51-ssl-cert/">Openssl生成自签名证书，简单步骤 - 凝雨 - Yun</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.cnblogs.com/zhaobowen/p/13321578.html">自签名证书和CA证书的区别和制作、使用 - 名字很长容易被惦记 - 博客园</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://breezetemple.github.io/2019/04/08/setup-your-own-CA-with-OpenSSL/">使用 OpenSSL 生成私钥和签名并自己做 CA 签名 |</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.tangyuecan.com/2021/12/17/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E6%90%AD%E5%BB%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%AF%E4%BF%A1%E4%BB%BB%E7%9A%84ssl%E8%AF%81%E4%B9%A6/">局域网内搭建浏览器可信任的SSL证书 – 唐玥璨 | 博客</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://galiyy.github.io/2020/03/31/Apache%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6-%E5%AE%9E%E7%8E%B0https%E8%AE%BF%E9%97%AE/">Apache配置ssl证书-实现https访问 | Galiyy’blog</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://blog.ideawand.com/2017/11/22/build-certificate-that-support-Subject-Alternative-Name-SAN/">使用OpenSSL生成含有Subject Alternative Name(SAN)的证书 | IdeaWand</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://www.cnblogs.com/zhangmingcheng/p/18412749">OpenSSL证书通过Subject Alternative Name扩展字段扩展证书支持的域名 - 人艰不拆_zmc - 博客园</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://foreverzmyer.hashnode.dev/cert">https://foreverzmyer.hashnode.dev/cert</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>ssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《炼金术战争》</title>
    <link href="/2024/12/01/%E3%80%8A%E7%82%BC%E9%87%91%E6%9C%AF%E6%88%98%E4%BA%89%E3%80%8B/"/>
    <url>/2024/12/01/%E3%80%8A%E7%82%BC%E9%87%91%E6%9C%AF%E6%88%98%E4%BA%89%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h2><p>伊恩·特里吉利斯是一位大胡子江湖医生和某个名誉扫地的塔罗牌预言师的儿子。他还是另一位大胡子乔治·马丁的天才徒弟。<br>他在明尼苏达州出生长大，他的父母为了躲避一位佛兰德亲王的怒火而逃到了那里。（按他的说法，详细的故事还会牵扯到一艘荷兰不定期货船与一匹偷来的马。）如今他和妻子与一只饮食过量的猫住在新墨西哥州，而他在那里与作家、科学家及其他“恶党”为伍。<br>伊恩·特里吉利斯毕业于明尼苏达州州立大学，物理学博士。现就职于美国洛斯阿拉莫斯国家实验室。代表作品：“炼金术战争”系列，“神魔二战”系列。</p><h2 id="机械人"><a href="#机械人" class="headerlink" title="机械人"></a>机械人</h2><p>贾克斯的自由<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="炼金术战争——机械人，Page165">[1]</span></a></sup></p><blockquote><p>自由的感觉……无可比拟。</p><p>自由意志是一片真空，一片负空间。其中没有压力，没有强迫，没有痛苦。是他的意识——此前存在众多禁制，不断争夺其主导权的意识——之中的一片空白。它是照相底片，记录着贾克斯被铸造出来的这118年里的每一分钟的存在。</p><p>它压倒一切。令他兴奋，以及恐惧。</p><p>压倒一切。他能做他想做的任何事。但“任何事都可以”也就代表“没什么特别的事“。自由不会推动他的脚步，也不会为他指引方向。人类是怎么指引自己的？他们怎么知道哪些事该做，哪些不该做？没有禁制和超禁制在争夺生活中每次行动的主导权，他们怎么知道该在何时做些什么？没人告诉他们该做什么，他们又是如何安排每日生活的？</p></blockquote><p>安娜斯塔西亚·贝尔<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="炼金术战争——机械人，Page216">[2]</span></a></sup></p><blockquote><p>“你说我们人类与我们的造物并没有太大分别，这一点没说错。但方向跟你主张的不同。喀拉客并不是另一种拥有灵魂的造物。我们人类也缺少了同样的东西。可悲的事实在于，神父，所谓的灵魂或者自由意志并不存在。二者都只是幻想而已。”</p></blockquote><h2 id="Refreneces"><a href="#Refreneces" class="headerlink" title="Refreneces"></a>Refreneces</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>炼金术战争——机械人，Page165<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>炼金术战争——机械人，Page216<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过frida hook ssl函数获取APP流量</title>
    <link href="/2024/09/04/%E9%80%9A%E8%BF%87frida-hook-ssl%E5%87%BD%E6%95%B0%E8%8E%B7%E5%8F%96APP%E6%B5%81%E9%87%8F/"/>
    <url>/2024/09/04/%E9%80%9A%E8%BF%87frida-hook-ssl%E5%87%BD%E6%95%B0%E8%8E%B7%E5%8F%96APP%E6%B5%81%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>通常通过安装证书和设置代理可以mitm并解密所有的流量<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Sniffing TLS traffic on Android | Learning Frida (nibarius.github.io)](https://nibarius.github.io/learning-frida/2022/05/21/sniffing-tls-traffic)">[1]</span></a></sup>。但是有些时候不适宜使用代理，所以还可以通过直接hook ssl的函数来解密流量<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[friTap - 动态解密 TLS ：： lolcads](https://lolcads.github.io/posts/2022/08/fritap/)">[2]</span></a></sup>：</p>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-65ad56e5" role="button" aria-expanded="false" aria-controls="collapse-65ad56e5">        <div class="fold-arrow">▶</div>js code      </div>      <div class="fold-collapse collapse" id="collapse-65ad56e5">        <div class="fold-content">          <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* define global objects.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> SSL_get_fd, SSL_get_session, SSL_SESSION_get_id, getpeername, getsockname, ntohs, ntohl, addresses;<br><span class="hljs-keyword">var</span> necessary_functions = [<br>    <span class="hljs-string">&quot;SSL_get_fd&quot;</span>,<br>    <span class="hljs-string">&quot;SSL_get_session&quot;</span>,<br>    <span class="hljs-string">&quot;SSL_SESSION_get_id&quot;</span>,<br>    <span class="hljs-string">&quot;getpeername&quot;</span>,<br>    <span class="hljs-string">&quot;getsockname&quot;</span>,<br>    <span class="hljs-string">&quot;ntohs&quot;</span>,<br>    <span class="hljs-string">&quot;ntohl&quot;</span><br>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Start the Script.&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Initializes &#x27;addresses&#x27; dictionary and NativeFunctions.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initializeGlobals</span>(<span class="hljs-params"></span>) &#123;<br>    addresses = &#123;&#125;;<br>    <span class="hljs-keyword">var</span> resolver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiResolver</span>(<span class="hljs-string">&quot;module&quot;</span>);<br>    <span class="hljs-keyword">var</span> exps = [<br>        [<span class="hljs-string">&quot;*libssl*&quot;</span>,<br>            [<span class="hljs-string">&quot;SSL_read&quot;</span>, <span class="hljs-string">&quot;SSL_write&quot;</span>, <span class="hljs-string">&quot;SSL_get_fd&quot;</span>, <span class="hljs-string">&quot;SSL_get_session&quot;</span>,<br>                <span class="hljs-string">&quot;SSL_SESSION_get_id&quot;</span>]],<br>        [<span class="hljs-string">&quot;*libc*&quot;</span>,<br>            [<span class="hljs-string">&quot;getpeername&quot;</span>, <span class="hljs-string">&quot;getsockname&quot;</span>, <span class="hljs-string">&quot;ntohs&quot;</span>, <span class="hljs-string">&quot;ntohl&quot;</span>]]<br>    ];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; exps.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> lib = exps[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">var</span> names = exps[i][<span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; names.<span class="hljs-property">length</span>; j++) &#123;<br>            <span class="hljs-keyword">var</span> name = names[j];<br>            <span class="hljs-keyword">var</span> matches = resolver.<span class="hljs-title function_">enumerateMatchesSync</span>(<span class="hljs-string">&quot;exports:&quot;</span> + lib + <span class="hljs-string">&quot;!&quot;</span> +<br>                name);<br>            <span class="hljs-keyword">if</span> (matches.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Could not find &quot;</span> + lib + <span class="hljs-string">&quot;!&quot;</span> + name;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matches.<span class="hljs-property">length</span> != <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// Sometimes Frida returns duplicates.</span><br>                <span class="hljs-keyword">var</span> address = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">var</span> duplicates_only = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span>; k &lt; matches.<span class="hljs-property">length</span>; k++) &#123;<br>                    <span class="hljs-keyword">if</span> (s.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>) &#123;<br>                        s += <span class="hljs-string">&quot;, &quot;</span>;<br>                    &#125;<br>                    s += matches[k].<span class="hljs-property">name</span> + <span class="hljs-string">&quot;@&quot;</span> + matches[k].<span class="hljs-property">address</span>;<br>                    <span class="hljs-keyword">if</span> (address == <span class="hljs-number">0</span>) &#123;<br>                        address = matches[k].<span class="hljs-property">address</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!address.<span class="hljs-title function_">equals</span>(matches[k].<span class="hljs-property">address</span>)) &#123;<br>                        duplicates_only = <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (!duplicates_only) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;More than one match found for &quot;</span> + lib + <span class="hljs-string">&quot;!&quot;</span> + name + <span class="hljs-string">&quot;: &quot;</span> +<br>                    s;<br>                &#125;<br>            &#125;<br>            addresses[name] = matches[<span class="hljs-number">0</span>].<span class="hljs-property">address</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> index <span class="hljs-keyword">in</span> necessary_functions) &#123;<br>        <span class="hljs-keyword">var</span> key = necessary_functions[index];<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;   * Function: &quot;</span> + key + <span class="hljs-string">&quot;, value: &quot;</span> + addresses[key]);<br>    &#125;<br>    SSL_get_fd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(addresses[<span class="hljs-string">&quot;SSL_get_fd&quot;</span>], <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>]);<br>    SSL_get_session = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(addresses[<span class="hljs-string">&quot;SSL_get_session&quot;</span>], <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>]);<br>    SSL_SESSION_get_id = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(addresses[<span class="hljs-string">&quot;SSL_SESSION_get_id&quot;</span>], <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]);<br>    getpeername = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(addresses[<span class="hljs-string">&quot;getpeername&quot;</span>], <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]);<br>    getsockname = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(addresses[<span class="hljs-string">&quot;getsockname&quot;</span>], <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]);<br>    ntohs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(addresses[<span class="hljs-string">&quot;ntohs&quot;</span>], <span class="hljs-string">&quot;uint16&quot;</span>, [<span class="hljs-string">&quot;uint16&quot;</span>]);<br>    ntohl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(addresses[<span class="hljs-string">&quot;ntohl&quot;</span>], <span class="hljs-string">&quot;uint32&quot;</span>, [<span class="hljs-string">&quot;uint32&quot;</span>]);<br>&#125;<br><span class="hljs-title function_">initializeGlobals</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns a dictionary of a sockfd&#x27;s &quot;src_addr&quot;, &quot;src_port&quot;, &quot;dst_addr&quot;, and</span><br><span class="hljs-comment"> * &quot;dst_port&quot;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">int</span>&#125; sockfd The file descriptor of the socket to inspect.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">boolean</span>&#125; isRead If true, the context is an SSL_read call. If</span><br><span class="hljs-comment"> *     false, the context is an SSL_write call.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">dict</span>&#125; Dictionary of sockfd&#x27;s &quot;src_addr&quot;, &quot;src_port&quot;, &quot;dst_addr&quot;,</span><br><span class="hljs-comment"> *     and &quot;dst_port&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPortsAndAddresses</span>(<span class="hljs-params">sockfd, isRead</span>) &#123;<br>    <span class="hljs-keyword">var</span> message = &#123;&#125;;<br><br>    <span class="hljs-keyword">var</span> addrlen = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">var</span> addr = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">16</span>);<br><br>    <span class="hljs-keyword">var</span> src_dst = [<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;dst&quot;</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; src_dst.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeU32</span>(addrlen, <span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">if</span> ((src_dst[i] == <span class="hljs-string">&quot;src&quot;</span>) ^ isRead) &#123;<br>            <span class="hljs-title function_">getsockname</span>(sockfd, addr, addrlen);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">getpeername</span>(sockfd, addr, addrlen);<br>        &#125;<br>        message[src_dst[i] + <span class="hljs-string">&quot;_port&quot;</span>] = <span class="hljs-title function_">ntohs</span>(<span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readU16</span>(addr.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>)));<br>        message[src_dst[i] + <span class="hljs-string">&quot;_addr&quot;</span>] = <span class="hljs-title function_">ntohl</span>(<span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readU32</span>(addr.<span class="hljs-title function_">add</span>(<span class="hljs-number">4</span>)));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> message;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Get the session_id of SSL object and return it as a hex string.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">!NativePointer</span>&#125; ssl A pointer to an SSL object.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">dict</span>&#125; A string representing the session_id of the SSL object&#x27;s</span><br><span class="hljs-comment"> *     SSL_SESSION. For example,</span><br><span class="hljs-comment"> *     &quot;59FD71B7B90202F359D89E66AE4E61247954E28431F6C6AC46625D472FF76336&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSslSessionId</span>(<span class="hljs-params">ssl</span>) &#123;<br>    <span class="hljs-keyword">var</span> session = <span class="hljs-title function_">SSL_get_session</span>(ssl);<br>    <span class="hljs-keyword">if</span> (session == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> len = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-title function_">SSL_SESSION_get_id</span>(session, len);<br>    len = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readU32</span>(len);<br><br>    <span class="hljs-keyword">var</span> session_id = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-comment">// Read a byte, convert it to a hex string (0xAB ==&gt; &quot;AB&quot;), and append</span><br>        <span class="hljs-comment">// it to session_id.</span><br>        session_id +=<br>            (<span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readU8</span>(p.<span class="hljs-title function_">add</span>(i)).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toUpperCase</span>()).<span class="hljs-title function_">substr</span>(-<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> session_id;<br>&#125;<br><br><span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(addresses[<span class="hljs-string">&quot;SSL_read&quot;</span>],<br>    &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-keyword">var</span> message = <span class="hljs-title function_">getPortsAndAddresses</span>(<span class="hljs-title function_">SSL_get_fd</span>(args[<span class="hljs-number">0</span>]), <span class="hljs-literal">true</span>);<br>            message[<span class="hljs-string">&quot;ssl_session_id&quot;</span>] = <span class="hljs-title function_">getSslSessionId</span>(args[<span class="hljs-number">0</span>]);<br>            message[<span class="hljs-string">&quot;function&quot;</span>] = <span class="hljs-string">&quot;SSL_read&quot;</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = message;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">buf</span> = args[<span class="hljs-number">1</span>];<br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            retval |= <span class="hljs-number">0</span>; <span class="hljs-comment">// Cast retval to 32-bit integer.</span><br>            <span class="hljs-keyword">if</span> (retval &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-title function_">send</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>, <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readByteArray</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">buf</span>, retval));<br>        &#125;<br>    &#125;);<br><br><span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(addresses[<span class="hljs-string">&quot;SSL_write&quot;</span>],<br>    &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-comment">//var message = &quot;Requests.&quot;</span><br>            <span class="hljs-keyword">var</span> message = <span class="hljs-title function_">getPortsAndAddresses</span>(<span class="hljs-title function_">SSL_get_fd</span>(args[<span class="hljs-number">0</span>]), <span class="hljs-literal">false</span>);<br>            message[<span class="hljs-string">&quot;ssl_session_id&quot;</span>] = <span class="hljs-title function_">getSslSessionId</span>(args[<span class="hljs-number">0</span>]);<br>            message[<span class="hljs-string">&quot;function&quot;</span>] = <span class="hljs-string">&quot;SSL_write&quot;</span>;<br>            <span class="hljs-title function_">send</span>(message, <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readByteArray</span>(args[<span class="hljs-number">1</span>], <span class="hljs-built_in">parseInt</span>(args[<span class="hljs-number">2</span>])));<br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123; &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-28ab9646" role="button" aria-expanded="false" aria-controls="collapse-28ab9646">        <div class="fold-arrow">▶</div>python code      </div>      <div class="fold-collapse collapse" id="collapse-28ab9646">        <div class="fold-content">          <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> datetime<br><br><br>ROOT_DIR = <span class="hljs-string">&quot;&quot;</span><br>SCRIPT = <span class="hljs-string">&quot;&quot;</span><br>APP = <span class="hljs-string">&quot;com.xxx&quot;</span><br><br><br>device = frida.get_usb_device()<br><span class="hljs-comment"># pid = device.spawn(APP) # I don&#x27;t know why this does not work well.</span><br>pid = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> device.enumerate_applications():<br>    <span class="hljs-keyword">if</span> a.identifier == APP:<br>        pid = a.pid  <span class="hljs-comment"># find the process by its&#x27; package name and get its&#x27; pid</span><br>        <span class="hljs-keyword">break</span><br><br>time.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># waitting for something (I don&#x27;t know for what THING, but let&#x27;s wait)</span><br>session = device.attach(pid)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Press Ctrl+C to stop logging.&quot;</span>)<br>fw = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ROOT_DIR&#125;</span>/log/<span class="hljs-subst">&#123;APP&#125;</span>-<span class="hljs-subst">&#123;datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d_%H_%M_%S&#x27;</span>)&#125;</span>.log&quot;</span>,<span class="hljs-string">&#x27;w+&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># file object to write log</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ROOT_DIR&#125;</span>/js_scripts/ssl_hook.js&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    SCRIPT = <span class="hljs-built_in">str</span>(f.read())<br>    <span class="hljs-comment"># print(SCRIPT)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_msg</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;send&quot;</span>:<br>        <span class="hljs-built_in">print</span>(message[<span class="hljs-string">&quot;payload&quot;</span>], data)<br>        fw.write(<span class="hljs-string">&quot;payload: &quot;</span> + <span class="hljs-built_in">str</span>(message[<span class="hljs-string">&quot;payload&quot;</span>]) + <span class="hljs-string">&quot;\n&quot;</span>)<br>        fw.write(<span class="hljs-string">&quot;data: &quot;</span> + <span class="hljs-built_in">str</span>(data) + <span class="hljs-string">&quot;\n&quot;</span>)<br>        fw.flush()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Send type error!&quot;</span>)<br>        <span class="hljs-built_in">print</span>(message, data)<br><br>script = session.create_script(SCRIPT)<br>script.on(<span class="hljs-string">&#x27;message&#x27;</span>, on_msg)<br><br>script.load()<br><br>sys.stdin.read()<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>以上代码来自fanxs-t&#x2F;Android-SSL_read-write-Hook<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[fanxs-t/Android-SSL_read-write-Hook: Hook SSL_read and SSL_write functions in the Android application with Frida. (github.com)](https://github.com/fanxs-t/Android-SSL_read-write-Hook)">[3]</span></a></sup>（有一些修改）</p><p>通过ApiResolver获取libssl中的几个关键函数的地址，并hook相应的函数来获取解密后的流量。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://nibarius.github.io/learning-frida/2022/05/21/sniffing-tls-traffic">Sniffing TLS traffic on Android | Learning Frida (nibarius.github.io)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://lolcads.github.io/posts/2022/08/fritap/">friTap - 动态解密 TLS ：： lolcads</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/fanxs-t/Android-SSL_read-write-Hook">fanxs-t&#x2F;Android-SSL_read-write-Hook: Hook SSL_read and SSL_write functions in the Android application with Frida. (github.com)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>流量分析</tag>
      
      <tag>reverse</tag>
      
      <tag>hook</tag>
      
      <tag>frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WLAN局域网抓包探索</title>
    <link href="/2024/08/08/WLAN%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8A%93%E5%8C%85%E6%8E%A2%E7%B4%A2/"/>
    <url>/2024/08/08/WLAN%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8A%93%E5%8C%85%E6%8E%A2%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<p>之前记录过在ubuntu用linux_router来搭建无线网络抓包环境<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[wireshark+ssh输出重定向跨主机抓包 - zr4in](https://zr4in.github.io/2024/05/13/wireshark-ssh输出重定向跨主机抓包/)">[1]</span></a></sup>（ps：这里的无线网络抓包并不是抓802.11空口报文的意思，而是做实验需要获取无线局域网中的所有流量）。大概的网络结构是这样的：</p><p><img src="https://s2.loli.net/2024/08/08/rZBn5dP2jiLSb8F.png" alt="image-20240808153135907"></p><p>Ubuntu上有两张网卡，一张有线eth0一张无线wlan0，其中eth0连接到上游的路由器，而wlan0用来开启hotspot作为无线AP，给其他的无线设备提供Wi-Fi。这样在Ubuntu上直接使用tcpdump，抓取wlan0这张网卡上的所有流量，实际上就相当于在左侧这个网络的第二层（甚至第一层？）上抓包，那么就能抓取整个无线局域网中各个设备之间以及这些设备和外界互联网之间的流量。</p><p>在这种情况下可以抓包，但是却没办法对WLAN中的设备进行更细粒度的管理和操作，比如禁用某个设备和某个外界IP的连接，总之做实验需要这些操作，但是用linux_router做不到。于是决定折腾。以下是弯路：</p><h2 id="x86-64主机安装PVE-openwrt虚拟机"><a href="#x86-64主机安装PVE-openwrt虚拟机" class="headerlink" title="x86_64主机安装PVE+openwrt虚拟机"></a>x86_64主机安装PVE+openwrt虚拟机</h2><p>被学长安利使用PVE安装openwrt虚拟机，然后在实验室发的电脑上安装pve，结果硬件直通的时候，intel的ax201网卡驱动有问题，pve和openwrt都无法识别pcie设备，于是借（白嫖）来了他已经安装好PVE和openwrt的一个工控主机。但是主机上只有4个RJ45接口，没有无线网卡。于是构思了下面的结构：</p><p><img src="https://s2.loli.net/2024/08/08/t1xunsYylq4oM6S.png" alt="image-20240808163053275"></p><p>可以看出来和第一张图几乎是没有区别的（因为根本就是用上面那张图改的），唯一的区别就是openwrt上没有无线网卡，只能把一个小米路由器改成有线中继模式，然后作为一个无线交换机接到openwrt的eth1上，eth1接口上提供dhcp服务，并且作为局域网的网关。</p><p>看上去很完美，但是实际上满足不了前面提到的需求。因为小米的路由器起到了交换机的作用，所以局域网内部设备之间的报文实际上完全没有经过网关，那么在openwrt的eth1上抓包的话，局域网内部的设备之间的流量是完全看不到的，只能抓到广播报文和流出去的报文。第一张图是因为Ubuntu的无线网卡提供了AP，所以可以抓二层的包，但是这张图，只能抓到经过eth1流经openwrt，最终路由到互联网上的报文。</p><p>搞了半天还是在有无线网卡的主机上折腾，这样相当于交换机也是可以抓包的（因为交换机就在主机里面），所以接下来试着折腾在树莓派上装个openwrt。</p><h2 id="树莓派-openwrt"><a href="#树莓派-openwrt" class="headerlink" title="树莓派+openwrt"></a>树莓派+openwrt</h2><p>首先是编译镜像，按照找到的教程<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[树莓派4B安装OpenWrt旁路由并设置相关软件（保姆式教程） - 怕刺 (pa.ci)](https://pa.ci/251.html)">[2]</span></a></sup>上的说法，从某个网站<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[OpenWrt Firmware Selector](https://firmware-selector.openwrt.org/)">[3]</span></a></sup>上编译自定义的固件，先输入使用的型号（<code>Raspberry Pi 4B/400/CM4 (64bit)</code>），右边还可以选择openwrt的版本，默认是最新版（23.05.4），然后展开首次运行的脚本，进行一些定制的设置，点击右下角的齿轮，会自动输入模板，然后把相应设置项的注释符号<code>#</code>删掉，并更改自己想改的设置，比如wifi的ssid和口令，还有root的密码，然后点击请求构建。之后下载FACTORY (EXT4)版本。</p><p><img src="https://s2.loli.net/2024/08/09/XTycYWpCi75mFZk.png" alt="image-20240809112632822"></p><p>下载下来的文件解压后获得img镜像文件，使用烧录镜像的软件（我用的树莓派官方的）烧录进启动的设备（SD卡或者U盘），然后插到树莓派上通电启动。然后就会遇到各种问题了，如下：</p><h3 id="无法启动"><a href="#无法启动" class="headerlink" title="无法启动"></a>无法启动</h3><p>似乎使用u盘作为启动设备会有一点小小的故障，无法启动，查资料应该是有一些bug，感觉是因为固件网站<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[OpenWrt Firmware Selector](https://firmware-selector.openwrt.org/)">[3]</span></a></sup>默认大家是通过SD卡启动的，所以镜像文件里的设置是固定的，总之解决方案在<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="[树莓派4B用USB启动OpenWrt固件 · Issue #12 · QuentinHsu/Document-Page · GitHub](https://github.com/QuentinHsu/Document-Page/issues/12)">[7]</span></a></sup>中有提到，更改烧录镜像后的启动设备中的一个文件的内容：</p><blockquote><p>在root分区（应该是打错了，实际上是boot分区）有个cmdline.txt，把<code>root=/dev/mmcblk0p2</code>改成<code>root=/dev/sda2</code>就行了</p></blockquote><p>然后继续，通电启动，按照<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[树莓派4B安装OpenWrt旁路由并设置相关软件（保姆式教程） - 怕刺 (pa.ci)](https://pa.ci/251.html)">[2]</span></a></sup>的说法，实际上这时候应该能找到树莓派的wifi了，但是我自己试下来并没有，刚开始时只能通过命令行访问树莓派，<code>ip addr</code>查看发现只有<code>br-lan</code>这个网桥设备有<code>192.168.1.1</code>这个ip，这个应该是openwrt的子网内部的ip，树莓派还有个<code>eth0</code>的以太网网卡，是没有ip的，试了一下插到自己有网络连接的路由器上，发现<code>eth0</code>刚开始还能自动获取ip，后来干脆ip都没有了。</p><h3 id="没有ip无法进入web后台"><a href="#没有ip无法进入web后台" class="headerlink" title="没有ip无法进入web后台"></a>没有ip无法进入web后台</h3><p>没有wifi，而且有线网卡也不会自动dhcp，通过命令行改<code>eth0</code>的设置也不行，这样就没办法通过openwrt的web后台来配置路由器了。而且通过命令行修改<code>/etc/config/network</code>文件还会发现文件系统是<code>readonly</code>，后来查资料发现可能是某种bug<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[关于树莓派刷写 Openwrt 固件后的一个小疑惑 - V2EX](https://global.v2ex.com/t/798492)">[4]</span></a></sup>，后来按照<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[树莓派软路由openwrt折腾记 - yuaneuro's blog](https://yuaneu.ro/archives/openwrt.html)">[5]</span></a></sup>中的说法应该是意外断电导致的（确实在安装的时候我自己手动断电过好几次，因为实在不知道怎么操作），<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[树莓派软路由openwrt折腾记 - yuaneuro's blog](https://yuaneu.ro/archives/openwrt.html)">[5]</span></a></sup><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Read only root filesystem - Installing and Using OpenWrt - OpenWrt Forum](https://forum.openwrt.org/t/read-only-root-filesystem/111913)">[6]</span></a></sup>给出的解决方案有：<code>e2fsck -y /dev/[your device]</code>然后<code>reboot</code>重启就可以了，注意<code>[your device]</code>换成你用的启动设备，我的是<code>sda2</code>（和前面解决无法启动的bug时是对应的，也就是启动的操作系统分区）。</p><p>总之后来的解决办法是，把树莓派的以太网口和自己的电脑的以太网口连到一起，有些教程说自己电脑设置dhcp就可以，我试了一下好像不行</p><p><img src="https://s2.loli.net/2024/08/09/qZBAHWrl2mY3hPn.png" alt="image-20240809162335323"></p><p>总之手动设置ip肯定也是可以的，设置自己的电脑的ip为<code>192.168.1.2</code>（应该不和openwrt的<code>192.168.1.1</code>重复就行）</p><p><img src="https://s2.loli.net/2024/08/09/dmcirCuSftJXj6v.png" alt="image-20240809162509846"></p><p>然后通过浏览器访问<code>http://192.168.1.1</code>也就是openwrt的管理后台，在这里更改openwrt的设置。</p><p><img src="https://s2.loli.net/2024/08/09/ea7hCI2jVW5diPM.png" alt="image-20240809162609248"></p><p>第一件事，先把防火墙关了（也不是关了，反正配置宽松一点），openwrt默认只能通过lan访问后台进行配置，先把wan口配置的防火墙规则打开，这样就可以直接在子网之外就能通过web后台来配置路由器了。总之全都改成accept，然后save &amp; apply：</p><p><img src="https://s2.loli.net/2024/08/09/H6WFw7PlzecGhrB.png" alt="image-20240809162912603"></p><h3 id="添加wan口"><a href="#添加wan口" class="headerlink" title="添加wan口"></a>添加wan口</h3><p>进入后台之后，为了方便以后的配置，在导航栏network-&gt;interfaces下添加一个网络接口，也就是添加一个wan口。设置wan口为dhcp client。</p><p><img src="https://s2.loli.net/2024/08/09/dDc5ReQf6ECapH8.png" alt="image-20240809163355654"></p><p>然后进到network-&gt;wireless，把wifi打开一下，下图是已经enable了的情况：</p><p><img src="https://s2.loli.net/2024/08/09/2FqA8fBWTp3SPig.png" alt="image-20240809164614181"></p><p>然后把原来的br-lan这个interface改一下（因为这个interface也用了eth0这个物理设备，会出现冲突，改到无线网络接口上，选中wireless设备就行）：</p><p><img src="https://s2.loli.net/2024/08/09/cROwWQCahqSkLvF.png" alt="image-20240809164743052"></p><p>然后save apply，执行之后实际上目前这个浏览器的窗口就不会有响应了，因为现在网络拓扑已经变化了，这时候可以把树莓派上的网线接到上游的路由器了。注意这里尽快把网线换到路由器上，忘记在哪看到的资料说多少秒内如果没有按照现有的配置成功完成设置，openwrt会自动reset回上次的设置，save and apply的时候有一个弹窗显示的时间应该就是timeout。由上层的路由器dhcp分配给它一个ip，可以通过这个ip来访问后台：</p><p><img src="https://s2.loli.net/2024/08/09/za4BNndLCJgKhRO.png" alt="image-20240809165240360"></p><h3 id="web后台更改设置无法生效"><a href="#web后台更改设置无法生效" class="headerlink" title="web后台更改设置无法生效"></a>web后台更改设置无法生效</h3><p>如果在web后台更改设置，然后点击apply，然后刷新页面发现实际上并没有apply成功，那有可能是因为<code>readonly</code>的文件系统导致的，按照前面说的，运行<code>e2fsck -y /dev/[your device]</code>然后<code>reboot</code>重启就可以了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>执行完上面的过程之后，树莓派已经变成一个合格的无线路由器了，然后就是其他的更改了。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>树莓派4B安装openwrt似乎存在2.4G频段的AP无法使用的情况，经过上述的配置之后，可以在5G频段以AP模式工作，但是无法在2.4G频段下以AP模式工作<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="[2.4 GHz radio doesn't work on Raspberry Pi 4B · Issue #9600 · openwrt/openwrt · GitHub](https://github.com/openwrt/openwrt/issues/9600)">[8]</span></a></sup>，会出现各种各样的报错。</p><p>然后根据这个issue中的讨论，这个问题很早之前就存在了，然后inconnu299<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/openwrt/openwrt/issues/9600#issuecomment-1279742554">[9]</span></a></sup>的回复是有效的，更改后我的<code>/etc/config/wireless</code>内容如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">config wifi-device <span class="hljs-string">&#x27;radio0&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-keyword">type</span> <span class="hljs-string">&#x27;mac80211&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-type">path</span> <span class="hljs-string">&#x27;platform/soc/fe300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1&#x27;</span><br>        <span class="hljs-keyword">option</span> channel <span class="hljs-string">&#x27;1&#x27;</span><br>        <span class="hljs-keyword">option</span> band <span class="hljs-string">&#x27;2g&#x27;</span><br>        <span class="hljs-keyword">option</span> disabled <span class="hljs-string">&#x27;0&#x27;</span><br>        <span class="hljs-keyword">option</span> short_gi_40 <span class="hljs-string">&#x27;0&#x27;</span><br>        <span class="hljs-keyword">option</span> htmode <span class="hljs-string">&#x27;HT40&#x27;</span><br>        <span class="hljs-keyword">option</span> cell_density <span class="hljs-string">&#x27;0&#x27;</span><br>#       <span class="hljs-keyword">option</span> legacy_rates <span class="hljs-string">&#x27;1&#x27;</span><br><br>config wifi-iface <span class="hljs-string">&#x27;wifinet0&#x27;</span><br>        <span class="hljs-keyword">option</span> device <span class="hljs-string">&#x27;radio0&#x27;</span><br>        <span class="hljs-keyword">option</span> mode <span class="hljs-string">&#x27;ap&#x27;</span><br>        <span class="hljs-keyword">option</span> ssid <span class="hljs-string">&#x27;your_ssid&#x27;</span><br>        <span class="hljs-keyword">option</span> encryption <span class="hljs-string">&#x27;psk2&#x27;</span><br>        <span class="hljs-keyword">option</span> key <span class="hljs-string">&#x27;your_wifi_password&#x27;</span><br>        <span class="hljs-keyword">option</span> network <span class="hljs-string">&#x27;lan&#x27;</span><br></code></pre></td></tr></table></figure><p>配置之后重启，然后就可以了。</p><p>。</p><p>暂时更到这里。一些可能有用的链接<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Wireless AP on Raspberry Pi 4B not working - Installing and Using OpenWrt / Network and Wireless Configuration - OpenWrt Forum](https://forum.openwrt.org/t/wireless-ap-on-raspberry-pi-4b-not-working/94875)">[10]</span></a></sup><sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Wireless is not Associated - Installing and Using OpenWrt / Network and Wireless Configuration - OpenWrt Forum](https://forum.openwrt.org/t/wireless-is-not-associated/63291/36)">[11]</span></a></sup><sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="[树莓派 4B OpenWrt 旁路由教程 | 叶寻的博客 (cyrusyip.org)](https://cyrusyip.org/zh-cn/posts/2021/08/30/raspberry-pi-4b-openwrt/)">[12]</span></a></sup><sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="[nftables 入门：从配置文件到端口转发 | Rachel's Blog | Rachel030219 (rachelt.one)](https://blog.rachelt.one/articles/new-to-nftables-from-config-to-dnat/)">[13]</span></a></sup></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zr4in.github.io/2024/05/13/wireshark-ssh%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E8%B7%A8%E4%B8%BB%E6%9C%BA%E6%8A%93%E5%8C%85/">wireshark+ssh输出重定向跨主机抓包 - zr4in</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://pa.ci/251.html">树莓派4B安装OpenWrt旁路由并设置相关软件（保姆式教程） - 怕刺 (pa.ci)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://firmware-selector.openwrt.org/">OpenWrt Firmware Selector</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://global.v2ex.com/t/798492">关于树莓派刷写 Openwrt 固件后的一个小疑惑 - V2EX</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://yuaneu.ro/archives/openwrt.html">树莓派软路由openwrt折腾记 - yuaneuro’s blog</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://forum.openwrt.org/t/read-only-root-filesystem/111913">Read only root filesystem - Installing and Using OpenWrt - OpenWrt Forum</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://github.com/QuentinHsu/Document-Page/issues/12">树莓派4B用USB启动OpenWrt固件 · Issue #12 · QuentinHsu&#x2F;Document-Page · GitHub</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://github.com/openwrt/openwrt/issues/9600">2.4 GHz radio doesn’t work on Raspberry Pi 4B · Issue #9600 · openwrt&#x2F;openwrt · GitHub</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://github.com/openwrt/openwrt/issues/9600#issuecomment-1279742554">https://github.com/openwrt/openwrt/issues/9600#issuecomment-1279742554</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span><a href="https://forum.openwrt.org/t/wireless-ap-on-raspberry-pi-4b-not-working/94875">Wireless AP on Raspberry Pi 4B not working - Installing and Using OpenWrt &#x2F; Network and Wireless Configuration - OpenWrt Forum</a><a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span><a href="https://forum.openwrt.org/t/wireless-is-not-associated/63291/36">Wireless is not Associated - Installing and Using OpenWrt &#x2F; Network and Wireless Configuration - OpenWrt Forum</a><a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span><a href="https://cyrusyip.org/zh-cn/posts/2021/08/30/raspberry-pi-4b-openwrt/">树莓派 4B OpenWrt 旁路由教程 | 叶寻的博客 (cyrusyip.org)</a><a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:13" class="footnote-text"><span><a href="https://blog.rachelt.one/articles/new-to-nftables-from-config-to-dnat/">nftables 入门：从配置文件到端口转发 | Rachel’s Blog | Rachel030219 (rachelt.one)</a><a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>openwrt</tag>
      
      <tag>流量分析</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过ssh隧道使用代理</title>
    <link href="/2024/07/11/%E9%80%9A%E8%BF%87ssh%E9%9A%A7%E9%81%93%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/"/>
    <url>/2024/07/11/%E9%80%9A%E8%BF%87ssh%E9%9A%A7%E9%81%93%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>实验室发的电脑性能太过孱弱了，就被我放在那当成24小时开机的个人服务器来用了，主要是做一些实验和作为sftp服务器，然后就在想，既然可以通过ssh隧道，作为文件服务器（其实是不是ftp over ssh这里先不深究），那么能不能通过ssh作为代理转发所有的流量呢？今天搜了一下果然有，先摆两个链接在这里<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[How to use SSH as a secure Proxy (networklessons.com)](https://networklessons.com/uncategorized/how-to-use-ssh-as-a-secure-proxy)">[1]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[SSH Tunneling and Proxying | Baeldung on Linux](https://www.baeldung.com/linux/ssh-tunneling-and-proxying)">[2]</span></a></sup>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://networklessons.com/uncategorized/how-to-use-ssh-as-a-secure-proxy">How to use SSH as a secure Proxy (networklessons.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.baeldung.com/linux/ssh-tunneling-and-proxying">SSH Tunneling and Proxying | Baeldung on Linux</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>M</title>
    <link href="/2024/07/10/M/"/>
    <url>/2024/07/10/M/</url>
    
    <content type="html"><![CDATA[<h2 id="Man-in-the-mirror"><a href="#Man-in-the-mirror" class="headerlink" title="Man in the mirror"></a>Man in the mirror</h2><blockquote><p>If you wanna make the world</p><p>A better place</p><p>Take a look at yourself</p><p>And then make that change</p></blockquote><h2 id="无名的人"><a href="#无名的人" class="headerlink" title="无名的人"></a>无名的人</h2><blockquote><p>你来自于 南方的村落 来自粗糙的双手</p><p>你站在 楼宇的缝隙 可你没有退缩</p><p>我来自于 北方的春天 来自一步一回首</p><p>背后有 告别的路口 温暖每个日落</p><p>当家乡入冬 的时候</p><p>列车到站 以后</p><p>小时候的风 再吹过</p><p>回忆起单纯 的快乐</p><p>在熟悉的 街头</p><p>有人 会用所有的温柔 喊出你的</p><p>名字</p></blockquote><h2 id="Life-Will-Change"><a href="#Life-Will-Change" class="headerlink" title="Life Will Change"></a>Life Will Change</h2><blockquote><p>And you’ll know we were out there</p><p>Swatted lies in the making</p><p>Your empire for the taking</p><p>Can’t hold on or life won’t change</p><p>And our voices rang out here</p><p>Took the mask off to feel free</p><p>Fought it out in the debris</p><p>Now we know that life will change</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wireshark+ssh输出重定向跨主机抓包</title>
    <link href="/2024/05/13/wireshark-ssh%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E8%B7%A8%E4%B8%BB%E6%9C%BA%E6%8A%93%E5%8C%85/"/>
    <url>/2024/05/13/wireshark-ssh%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E8%B7%A8%E4%B8%BB%E6%9C%BA%E6%8A%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>适用于linux主机作为热点网络AP，然后给其他设备提供网络连接，那么所有的流量都经过linux主机转发，也就方便了流量分析。然后如果希望在另一台主机（windows）上看到实时的抓包情况，可以通过ssh连接到linux，ssh命令的输出重定向到windows的wireshark中。</p><p>linux上运行create_ap<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[oblique/create_ap: \[NOT MAINTAINED\] This script creates a NATed or Bridged WiFi Access Point. (github.com)](https://github.com/oblique/create_ap)">[1]</span></a></sup>或者linux-wifi-hotspot<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[lakinduakash/linux-wifi-hotspot: Feature-rich wifi hotspot creator for Linux which provides both GUI and command-line interface. It is also able to create a hotspot using the same wifi card which is connected to an AP already ( Similar to Windows 10). (github.com)](https://github.com/lakinduakash/linux-wifi-hotspot)">[2]</span></a></sup>或者linux_router<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[garywill/linux-router: Set Linux as router in one command. Support Internet sharing, redsocks, Wifi hotspot, IPv6. Can also be used for routing VM/containers 🛰️ (也欢迎关注B站 https://space.bilibili.com/2123686105 ) (github.com)](https://github.com/garywill/linux-router)">[3]</span></a></sup></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">linux_router<br></code></pre></td></tr></table></figure><p>注意如果windows上没有wireshark添加到环境变量的话需要添加换进变量或者使用wireshark的绝对路径。而且要用cmd不能用powershell，似乎是因为powershell的管道重定向不太一样<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[使用 tcpdump 和 Wireshark 进行远程实时抓包分析 - This Cute World](https://thiscute.world/posts/tcpdump-and-wireshark/)">[4]</span></a></sup>。</p><p>windows上运行ssh+wireshark</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ssh username@host &quot;sudo tcpdump -i wlo1 -l -w -&quot; | wireshark -k -i -<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/oblique/create_ap">oblique&#x2F;create_ap: [NOT MAINTAINED] This script creates a NATed or Bridged WiFi Access Point. (github.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/lakinduakash/linux-wifi-hotspot">lakinduakash&#x2F;linux-wifi-hotspot: Feature-rich wifi hotspot creator for Linux which provides both GUI and command-line interface. It is also able to create a hotspot using the same wifi card which is connected to an AP already ( Similar to Windows 10). (github.com)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/garywill/linux-router">garywill&#x2F;linux-router: Set Linux as router in one command. Support Internet sharing, redsocks, Wifi hotspot, IPv6. Can also be used for routing VM&#x2F;containers 🛰️ (也欢迎关注B站 https://space.bilibili.com/2123686105 ) (github.com)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://thiscute.world/posts/tcpdump-and-wireshark/">使用 tcpdump 和 Wireshark 进行远程实时抓包分析 - This Cute World</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>流量分析</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无线网卡混杂模式wifi抓包</title>
    <link href="/2024/04/24/%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8Fwifi%E6%8A%93%E5%8C%85/"/>
    <url>/2024/04/24/%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8Fwifi%E6%8A%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>现在的IoT设备往往依赖于蓝牙、zigbee或者wifi等无线通信介质，为了更清晰地了解设备的通信，有必要学习一下wifi抓包。</p><h2 id="Airomon-ng"><a href="#Airomon-ng" class="headerlink" title="Airomon-ng"></a>Airomon-ng</h2><p>试过用<code>iwconfig</code>直接设置网卡为<code>Monitor</code>模式，然后直接用wireshark抓包，是不行的，应该还有其他设置，就不管了，还是用现成的工具吧<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux环境下Wi-Fi抓包说明 - Nordic Semiconductor中文官网](https://www.nordicsemi.cn/news/linux-environment-wifi-packet-capture-instructions/)">[1]</span></a></sup></p><p><code>airmon-ng</code>先设置网卡为监听模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo airmon-ng start wlo1<br></code></pre></td></tr></table></figure><p>注意如果输出提示有其他进程可能会影响抓包，就按照提示执行对应命令kill掉其他进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo airmon-ng check <span class="hljs-built_in">kill</span><br></code></pre></td></tr></table></figure><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">airodump-ng -c 6 --bssid mac_address_of_ap wlo1mon --output-format pcap -w file_to_write<br></code></pre></td></tr></table></figure><p><code>-c 6</code>指定了第6个信道，<code>--bssid</code>指定要抓取的ap的mac地址，然后是开启抓包模式的网卡的名称<code>wlo1mon</code>，然后<code>-w</code>指定要把抓取的报文写到哪个文件。</p><h2 id="解密wifi报文"><a href="#解密wifi报文" class="headerlink" title="解密wifi报文"></a>解密wifi报文</h2><p>在知道wifi密码并且抓到设备握手的报文之后，可以解密已加密的wifi报文<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[用Wireshark解密无线网络数据包 | F1v3's Notes (x-f1v3.github.io)](https://x-f1v3.github.io/blog/用Wireshark解密无线网络数据包.html)">[2]</span></a></sup>，有时候需要删除wireshark的配置文件避免出现bug<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[解密 802.11 加密数据包 | (breezetemple.github.io)](https://breezetemple.github.io/2019/05/31/decryption-802-11-with-wireshark/)">[3]</span></a></sup></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.nordicsemi.cn/news/linux-environment-wifi-packet-capture-instructions/">Linux环境下Wi-Fi抓包说明 - Nordic Semiconductor中文官网</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://x-f1v3.github.io/blog/%E7%94%A8Wireshark%E8%A7%A3%E5%AF%86%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%8C%85.html">用Wireshark解密无线网络数据包 | F1v3’s Notes (x-f1v3.github.io)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://breezetemple.github.io/2019/05/31/decryption-802-11-with-wireshark/">解密 802.11 加密数据包 | (breezetemple.github.io)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>流量分析</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows右键菜单新建markdown文档</title>
    <link href="/2024/04/23/windows%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%96%B0%E5%BB%BAmarkdown%E6%96%87%E6%A1%A3/"/>
    <url>/2024/04/23/windows%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%96%B0%E5%BB%BAmarkdown%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>typora的官网上有相应的教程<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Add New “Markdown” Item in Context Menu - Typora Support](https://support.typora.io/New-File-in-Context/)">[1]</span></a></sup>，就是更改windows的注册表，这样可以直接右键新建markdown文件，就不用朴素地新建txt文件然后再改后缀了，typora给出的注册表是：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br>[<span class="hljs-meta">HKEY_CLASSES_ROOT\.md</span>]<br>@=<span class="hljs-string">&quot;markdown&quot;</span><br><br>[<span class="hljs-meta">HKEY_CLASSES_ROOT\.md\ShellNew</span>]<br><span class="hljs-string">&quot;NullFile&quot;</span>=<span class="hljs-string">&quot;&quot;</span><br><br>[<span class="hljs-meta">HKEY_CLASSES_ROOT\markdown</span>]<br>@=<span class="hljs-string">&quot;Blank Markdown file&quot;</span><br></code></pre></td></tr></table></figure><p>可以先新建txt，然后复制进去，再改后缀为reg，然后双击运行，这样右键的新建菜单会有”Blank Markdown file”选项（个人感觉把Blank直接去掉更优雅）</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://support.typora.io/New-File-in-Context/">Add New “Markdown” Item in Context Menu - Typora Support</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>mix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记Android某APP逆向</title>
    <link href="/2024/04/16/%E8%AE%B0Android%E6%9F%90APP%E9%80%86%E5%90%91/"/>
    <url>/2024/04/16/%E8%AE%B0Android%E6%9F%90APP%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>记录一下自己探索安卓逆向的过程，纯新手脚本小子，如有谬误恳请各位斧正。</p><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><p>首先是获取手机的root权限，比较简单的方法是模拟器，一般都会直接开放root，但是有些app可能会有虚拟机检测，没有的话最好，有的话可能需要花心思考虑绕过，或者使用真机。</p><p>使用真机一般会好很多。真机root一般会用到magisk<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[topjohnwu/Magisk: The Magic Mask for Android (github.com)](https://github.com/topjohnwu/Magisk)">[1]</span></a></sup>，然后也需要对应手机型号的镜像文件（所以一般需要厂商支持root，比如小米的手机和google的pixel），这篇blog就先不讲怎么root的了，教程其实很多。</p><h2 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h2><p>然后是Frida<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[frida/frida: Clone this repo to build Frida (github.com)](https://github.com/frida/frida)">[2]</span></a></sup>，Frida是一个python + js的hook框架<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Frida 原理及简单使用 - Only-xiaoxiao - 博客园 (cnblogs.com)](https://www.cnblogs.com/Only-xiaoxiao/p/17294561.html)">[3]</span></a></sup>，本质上是一种动态插桩工具。使用的时候，在需要hook的地方，比如Android手机上以root权限运行对应架构（x86或者arm，虚拟机一般x86，真机一般arm）的frida-server，然后在进行hook的地方运行frida或者frida-tools工具，frida和frida-tools并不是同一个东西，我暂时没有专门去搞清楚这两者的联系，但是需要注意的是两者需要版本兼容<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Frida server 和 python client下载 版本对应关系 - 悟透 - 博客园 (cnblogs.com)](https://www.cnblogs.com/wutou/p/17884865.html)">[4]</span></a></sup>。一般直接安装最新版应该就可以：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install frida<br>pip install frida-tools<br></code></pre></td></tr></table></figure><h2 id="jadx"><a href="#jadx" class="headerlink" title="jadx"></a>jadx</h2><p>jadx<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[skylot/jadx: Dex to Java decompiler (github.com)](https://github.com/skylot/jadx)">[5]</span></a></sup>是一个开源安卓逆向工具，主要用于逆向分析apk，反编译为java源代码（当然一般不可能完美反编译，遇到过一些报错的地方）</p><p>如果apk没有加壳的话，直接把apk拖到jadx里就行，jadx会自动完成分析，比如这样：</p><p><img src="https://s2.loli.net/2024/04/23/MxLacvCR19o6myg.png" alt="image-20240423095710623"></p><p>如果代码是混淆过的，那可能会比较难过，只能慢慢看了，或许程序分析领域会有针对反混淆的研究，但是个人感觉可能都是比较ad-hoc的，而且其实混淆不是很严重的话，根据log或者一些字符串来进行推测，应该也是能分析的，我目前还没有用什么反混淆的工具，jadx自带反混淆工具，但也只是把一些函数名或者类名中的不常见的字符给去掉，换成一些常见字符加上数字编号。</p><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p>hook通俗点就是钩子（<del>沟子</del>）（<del>坏，沟子文学逐渐污染互联网</del>），把正常的实现替换为自己想要的实现，比如app中某个函数想要检测环境然后返回true或者false，然后你希望它永远返回true，就可以利用hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> java_class = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.app.classname&quot;</span>);<br>    <br>    java_class.<span class="hljs-property">function_name</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&quot;para list&quot;</span>).<span class="hljs-property">implemeation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-string">&quot;para list&quot;</span></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后使用frida的命令行工具将代码注入到对应的app进程就可以了<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[frida的用法--Hook Java代码篇 - luoyesiqiu - 博客园 (cnblogs.com)](https://www.cnblogs.com/luoyesiqiu/p/10718997.html)">[6]</span></a></sup></p><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>以运动健康app为例，比如希望知道它所有的加密操作（代码忘记从哪复制来的了，如有问题请联系我）：</p>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-e064c6af" role="button" aria-expanded="false" aria-controls="collapse-e064c6af">        <div class="fold-arrow">▶</div>js code      </div>      <div class="fold-collapse collapse" id="collapse-e064c6af">        <div class="fold-content">          <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showStacks</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">send</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.util.Log&quot;</span>).<span class="hljs-title function_">getStackTraceString</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;java.lang.Exception&quot;</span>).$new()));<br>    &#125;);<br>&#125;; <span class="hljs-comment">// print stack info</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bytesToHex</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> tmp = arr[i];<br>        <span class="hljs-keyword">if</span> (tmp &lt; <span class="hljs-number">0</span>) &#123;<br>            tmp = (<span class="hljs-number">255</span> + tmp + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tmp = tmp.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tmp.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) &#123;<br>            tmp = <span class="hljs-string">&quot;0&quot;</span> + tmp;<br>        &#125;<br>        str += tmp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bytesToBase64</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">var</span> base64EncodeChars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>;<br>    <span class="hljs-keyword">var</span> r, a, c, h, o, t;<br>    <span class="hljs-keyword">for</span> (c = e.<span class="hljs-property">length</span>, a = <span class="hljs-number">0</span>, r = <span class="hljs-string">&#x27;&#x27;</span>; a &lt; c;) &#123;<br>        <span class="hljs-keyword">if</span> (h = <span class="hljs-number">255</span> &amp; e[a++], a == c) &#123;<br>            r += base64EncodeChars.<span class="hljs-title function_">charAt</span>(h &gt;&gt; <span class="hljs-number">2</span>),<br>            r += base64EncodeChars.<span class="hljs-title function_">charAt</span>((<span class="hljs-number">3</span> &amp; h) &lt;&lt; <span class="hljs-number">4</span>),<br>            r += <span class="hljs-string">&#x27;==&#x27;</span>;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (o = e[a++], a == c) &#123;<br>            r += base64EncodeChars.<span class="hljs-title function_">charAt</span>(h &gt;&gt; <span class="hljs-number">2</span>),<br>            r += base64EncodeChars.<span class="hljs-title function_">charAt</span>((<span class="hljs-number">3</span> &amp; h) &lt;&lt; <span class="hljs-number">4</span> | (<span class="hljs-number">240</span> &amp; o) &gt;&gt; <span class="hljs-number">4</span>),<br>            r += base64EncodeChars.<span class="hljs-title function_">charAt</span>((<span class="hljs-number">15</span> &amp; o) &lt;&lt; <span class="hljs-number">2</span>),<br>            r += <span class="hljs-string">&#x27;=&#x27;</span>;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        t = e[a++],<br>        r += base64EncodeChars.<span class="hljs-title function_">charAt</span>(h &gt;&gt; <span class="hljs-number">2</span>),<br>        r += base64EncodeChars.<span class="hljs-title function_">charAt</span>((<span class="hljs-number">3</span> &amp; h) &lt;&lt; <span class="hljs-number">4</span> | (<span class="hljs-number">240</span> &amp; o) &gt;&gt; <span class="hljs-number">4</span>),<br>        r += base64EncodeChars.<span class="hljs-title function_">charAt</span>((<span class="hljs-number">15</span> &amp; o) &lt;&lt; <span class="hljs-number">2</span> | (<span class="hljs-number">192</span> &amp; t) &gt;&gt; <span class="hljs-number">6</span>),<br>        r += base64EncodeChars.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">63</span> &amp; t)<br>    &#125;<br>    <span class="hljs-keyword">return</span> r<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bytesToString</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> arr === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>,<br>    _arr = arr;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; _arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> one = _arr[i].<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>),<br>        v = one.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^1+?(?=0)/</span>);<br>        <span class="hljs-keyword">if</span> (v &amp;&amp; one.<span class="hljs-property">length</span> == <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-keyword">var</span> bytesLength = v[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>;<br>            <span class="hljs-keyword">var</span> store = _arr[i].<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">7</span> - bytesLength);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> st = <span class="hljs-number">1</span>; st &lt; bytesLength; st++) &#123;<br>                store += _arr[st + i].<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>);<br>            &#125;<br>            str += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-built_in">parseInt</span>(store, <span class="hljs-number">2</span>));<br>            i += bytesLength - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            str += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(_arr[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> secretKeySpec = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;javax.crypto.spec.SecretKeySpec&#x27;</span>);<br>    secretKeySpec.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>,<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a, b);<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.spec.SecretKeySpec.$init(byte[], String)</span><br><span class="hljs-string">算法名                  : <span class="hljs-subst">$&#123; b &#125;</span></span><br><span class="hljs-string">Dec密钥(String)         : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span></span><br><span class="hljs-string">Dec秘钥(Hex)            : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br><br>    <span class="hljs-keyword">var</span> mac = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;javax.crypto.Mac&#x27;</span>);<br>    mac.<span class="hljs-property">getInstance</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getInstance</span>(a);<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.Mac.getInstance(String)</span><br><span class="hljs-string">算法名                  : <span class="hljs-subst">$&#123; a &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br>    mac.<span class="hljs-property">update</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.Mac.update(byte[])</span><br><span class="hljs-string">Mac update(string)      : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span></span><br><span class="hljs-string">Mac update(hex)         : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(a);<br>    &#125;;<br>    mac.<span class="hljs-property">update</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>,<span class="hljs-string">&#x27;int&#x27;</span>,<span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b,c</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.Mac.update(byte[], int, int)</span><br><span class="hljs-string">Mac update(string)      : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span> | <span class="hljs-subst">$&#123; b &#125;</span> | <span class="hljs-subst">$&#123; c &#125;</span></span><br><span class="hljs-string">Mac update(hex)         : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span> | <span class="hljs-subst">$&#123; b &#125;</span> | <span class="hljs-subst">$&#123; c &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(a, b, c)<br>    &#125;;<br>    mac.<span class="hljs-property">doFinal</span>.<span class="hljs-title function_">overload</span>().<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">doFinal</span>();<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.Mac.doFinal()</span><br><span class="hljs-string">doFinal结果(hex)        : <span class="hljs-subst">$&#123; bytesToHex(result) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br>    mac.<span class="hljs-property">doFinal</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">doFinal</span>(a);<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.Mac.doFinal(byte[])</span><br><span class="hljs-string">doFinal参数(string)     : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span></span><br><span class="hljs-string">doFinal参数(hex)        : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span></span><br><span class="hljs-string">---</span><br><span class="hljs-string">doFinal结果(hex)        : <span class="hljs-subst">$&#123; bytesToHex(result) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br><br>    <span class="hljs-keyword">var</span> md = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.security.MessageDigest&#x27;</span>);<br>    md.<span class="hljs-property">getInstance</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>,<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== java.security.MessageDigest.getInstance(String, String)</span><br><span class="hljs-string">算法名                  ：<span class="hljs-subst">$&#123; a &#125;</span></span><br><span class="hljs-string">参数2                   ：<span class="hljs-subst">$&#123; b &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getInstance</span>(a, b);<br>    &#125;;<br>    md.<span class="hljs-property">getInstance</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== java.security.MessageDigest.getInstance(String)</span><br><span class="hljs-string">算法名                  ：<span class="hljs-subst">$&#123; a &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getInstance</span>(a);<br>    &#125;;<br>    md.<span class="hljs-property">update</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== java.security.MessageDigest.update(byte[])</span><br><span class="hljs-string">MessageDigest update(string)    : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span></span><br><span class="hljs-string">MessageDigest update(hex)       : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(a);<br>    &#125;;<br>    md.<span class="hljs-property">update</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>,<span class="hljs-string">&#x27;int&#x27;</span>,<span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b,c</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== java.security.MessageDigest.update(byte[], int, int)</span><br><span class="hljs-string">MessageDigest update(string)    : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span> | <span class="hljs-subst">$&#123; b &#125;</span> | <span class="hljs-subst">$&#123; c &#125;</span></span><br><span class="hljs-string">MessageDigest update(hex)       : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span> | <span class="hljs-subst">$&#123; b &#125;</span> | <span class="hljs-subst">$&#123; c &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(a,b,c);<br>    &#125;;<br>    md.<span class="hljs-property">digest</span>.<span class="hljs-title function_">overload</span>().<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">digest</span>();<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== java.security.MessageDigest.digest()</span><br><span class="hljs-string">digest结果(string)      : <span class="hljs-subst">$&#123; bytesToString(result) &#125;</span></span><br><span class="hljs-string">digest结果(hex)         : <span class="hljs-subst">$&#123; bytesToHex(result) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br>    md.<span class="hljs-property">digest</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">digest</span>(a);<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== java.security.MessageDigest.digest(byte[])</span><br><span class="hljs-string">digest参数(string)      : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span></span><br><span class="hljs-string">digest参数(hex   )      : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span></span><br><span class="hljs-string">---</span><br><span class="hljs-string">digest结果(string)      : <span class="hljs-subst">$&#123; bytesToString(result) &#125;</span></span><br><span class="hljs-string">digest结果(hex)         : <span class="hljs-subst">$&#123; bytesToHex(result) &#125;</span></span><br><span class="hljs-string">digest结果(base64)      : <span class="hljs-subst">$&#123; bytesToBase64(result) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br><br>    <span class="hljs-keyword">var</span> ivParameterSpec = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;javax.crypto.spec.IvParameterSpec&#x27;</span>);<br>    ivParameterSpec.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>       <span class="hljs-comment">// showStacks();</span><br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.spec.IvParameterSpec.$init(byte[])</span><br><span class="hljs-string">iv向量(string)          : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span></span><br><span class="hljs-string">iv向量(hex)             : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br><br>    <span class="hljs-keyword">var</span> cipher = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;javax.crypto.Cipher&#x27;</span>);<br>    cipher.<span class="hljs-property">getInstance</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getInstance</span>(a);<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.Cipher.getInstance(String)</span><br><span class="hljs-string">模式填充                : <span class="hljs-subst">$&#123; a &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br>    cipher.<span class="hljs-property">update</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.Cipher.update(byte[])\n&quot; +</span><br><span class="hljs-string">Cipher update(string)   : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span></span><br><span class="hljs-string">Cipher update(hex)      : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(a);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br>    cipher.<span class="hljs-property">update</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>,<span class="hljs-string">&#x27;int&#x27;</span>,<span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b,c</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.Cipher.update(byte[], int, int)</span><br><span class="hljs-string">Cipher update(string)   : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span> | <span class="hljs-subst">$&#123; b &#125;</span> | <span class="hljs-subst">$&#123; c &#125;</span></span><br><span class="hljs-string">Cipher update(hex)      : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span> | <span class="hljs-subst">$&#123; b &#125;</span> | <span class="hljs-subst">$&#123; c &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(a,b,c);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br>    cipher.<span class="hljs-property">doFinal</span>.<span class="hljs-title function_">overload</span>().<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">doFinal</span>();<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.Cipher.doFinal()</span><br><span class="hljs-string">doFinal结果(string)     : <span class="hljs-subst">$&#123; bytesToString(result) &#125;</span></span><br><span class="hljs-string">doFinal结果(hex)        : <span class="hljs-subst">$&#123; bytesToHex(result) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br>    cipher.<span class="hljs-property">doFinal</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">doFinal</span>(a);<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== javax.crypto.Cipher.doFinal(byte[])</span><br><span class="hljs-string">doFinal参数(string)     : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span></span><br><span class="hljs-string">doFinal参数(hex)        : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span></span><br><span class="hljs-string">---</span><br><span class="hljs-string">doFinal结果(string)     : <span class="hljs-subst">$&#123; bytesToString(result) &#125;</span></span><br><span class="hljs-string">doFinal结果(hex)        : <span class="hljs-subst">$&#123; bytesToHex(result) &#125;</span></span><br><span class="hljs-string">Stack:</span><br><span class="hljs-string"><span class="hljs-subst">$&#123; Java.use(<span class="hljs-string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="hljs-string">&quot;java.lang.Exception&quot;</span>).$new()) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br><br>    <span class="hljs-keyword">var</span> x509EncodedKeySpec = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.security.spec.X509EncodedKeySpec&#x27;</span>);<br>    x509EncodedKeySpec.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;[B&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a);<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== java.security.spec.X509EncodedKeySpec.$init(byte[])</span><br><span class="hljs-string">RSA密钥(string)         : <span class="hljs-subst">$&#123; bytesToString(a) &#125;</span></span><br><span class="hljs-string">RSA密钥(hex)            : <span class="hljs-subst">$&#123; bytesToHex(a) &#125;</span></span><br><span class="hljs-string">RSA密钥(base64)         : <span class="hljs-subst">$&#123; bytesToBase64(a) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br><br>    <span class="hljs-keyword">var</span> rSAPublicKeySpec = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.security.spec.RSAPublicKeySpec&#x27;</span>);<br>    rSAPublicKeySpec.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.math.BigInteger&#x27;</span>,<span class="hljs-string">&#x27;java.math.BigInteger&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) &#123;<br>        <span class="hljs-comment">//showStacks();</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.$init(a,b);<br>        <span class="hljs-title function_">send</span>(<br>            <span class="hljs-string">`========== java.security.spec.RSAPublicKeySpec.$init(BigInteger, BigInteger)</span><br><span class="hljs-string">RSA密钥N                : <span class="hljs-subst">$&#123; a.toString(<span class="hljs-number">16</span>) &#125;</span></span><br><span class="hljs-string">RSA密钥E                : <span class="hljs-subst">$&#123; b.toString(<span class="hljs-number">16</span>) &#125;</span></span><br><span class="hljs-string">`</span><br>            );<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>上面是js的代码，方便起见可以用python辅助hook过程，不用每次都在命令行敲进程名，并且<code>send</code>函数发送的消息也需要python代码来接收（这个我没有深究，之前找到的教程是这么做的我就这么做了）</p><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-keyword">import</span> frida, sys<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br> <br>jsCode = <span class="hljs-literal">None</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(sys.argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> r:<br>    jsCode = r.read()  <span class="hljs-comment"># load js code</span><br>    <span class="hljs-comment"># print(jsCode)</span><br> <br>fw = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;log/&quot;</span> + datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d_%H_%M_%S&#x27;</span>) + sys.argv[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;.js&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;.\\&quot;</span>, <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;.log&quot;</span>,<span class="hljs-string">&#x27;w+&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># file object to write log</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">message</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">u&quot;[*] &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>        fw.write(<span class="hljs-string">u&quot;[*] &#123;0&#125;\n&quot;</span>.<span class="hljs-built_in">format</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>        fw.flush()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(message)<br><br><br>device = frida.get_usb_device()<br><span class="hljs-comment"># print(process)</span><br>pid = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> device.enumerate_applications():<br>    <span class="hljs-keyword">if</span> a.identifier == <span class="hljs-string">&quot;com.huawei.smarthome&quot;</span>:<br>        pid = a.pid  <span class="hljs-comment"># find the process by its&#x27; package name and get its&#x27; pid</span><br>        <span class="hljs-keyword">break</span><br>process = device.attach(pid)<br>script= process.create_script(jsCode)<br>script.on(<span class="hljs-string">&quot;message&quot;</span>, message)<br>script.load()<br>sys.stdin.read()<br></code></pre></td></tr></table></figure><p>hook之前需要先adb<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Android 调试桥 (adb)  | Android Studio  | Android Developers](https://developer.android.com/tools/adb?hl=zh-cn)">[7]</span></a></sup><sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="[windows11安装adb步骤 - 测试0 - 博客园 (cnblogs.com)](https://www.cnblogs.com/momomolin/p/17347120.html)">[8]</span></a></sup>进入到设备的shell里然后启动frida-server</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">adb shell  # 先进入设备的shell<br><span class="hljs-function">oriole:/ $ <span class="hljs-title">su</span>  # 切换到<span class="hljs-title">root</span></span><br><span class="hljs-function"><span class="hljs-title">oriole</span>:/ # /<span class="hljs-title">data</span>/<span class="hljs-title">local</span>/<span class="hljs-title">tmp</span>/<span class="hljs-title">frida</span>-<span class="hljs-title">server</span>-16.1.10-<span class="hljs-title">android</span>-<span class="hljs-title">arm64</span> &amp;  # 加上&amp;，以后台方式运行<span class="hljs-title">frida</span>-<span class="hljs-title">server</span></span><br></code></pre></td></tr></table></figure><p>注意要有root权限，并且frida-server必须是对应的架构，和pc端的frida版本是否必须保持一致我没有确认，但是，if you can, why not。</p><p>然后手动启动应用，再启动python脚本文件开始hook就可以了</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">conda activate hook<br>python .\hook.py .\javaCipherAIO.js<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/topjohnwu/Magisk">topjohnwu&#x2F;Magisk: The Magic Mask for Android (github.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/frida/frida">frida&#x2F;frida: Clone this repo to build Frida (github.com)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.cnblogs.com/Only-xiaoxiao/p/17294561.html">Frida 原理及简单使用 - Only-xiaoxiao - 博客园 (cnblogs.com)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.cnblogs.com/wutou/p/17884865.html">Frida server 和 python client下载 版本对应关系 - 悟透 - 博客园 (cnblogs.com)</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://github.com/skylot/jadx">skylot&#x2F;jadx: Dex to Java decompiler (github.com)</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://www.cnblogs.com/luoyesiqiu/p/10718997.html">frida的用法–Hook Java代码篇 - luoyesiqiu - 博客园 (cnblogs.com)</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://developer.android.com/tools/adb?hl=zh-cn">Android 调试桥 (adb)  | Android Studio  | Android Developers</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://www.cnblogs.com/momomolin/p/17347120.html">windows11安装adb步骤 - 测试0 - 博客园 (cnblogs.com)</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>reverse</tag>
      
      <tag>hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器不显示中文</title>
    <link href="/2024/03/14/docker%E5%AE%B9%E5%99%A8%E4%B8%8D%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87/"/>
    <url>/2024/03/14/docker%E5%AE%B9%E5%99%A8%E4%B8%8D%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87/</url>
    
    <content type="html"><![CDATA[<p>打算搬迁自己的笔记到组里的服务器上，又因为是服务器，对环境限制比较多，不会随便安装一些包和lib库，所以大家基本上都是docker开自己的容器用。</p><p>然后：</p><p><img src="https://s2.loli.net/2024/03/14/uPHk8FEq4SVAYpo.png" alt="image-20240314104511933"></p><p>终端无法显示中文，实际上<code>zsh</code>的命令补全还是能显示中文的，但是终端就是不行</p><p><img src="https://s2.loli.net/2024/03/14/JFkHUG1vmegfPhq.png" alt="image-20240314104637839"></p><p>按照找到的教程，<code>locale</code>和<code>locale -a</code>查看本地正在使用以及支持的字符集：</p><p><img src="https://s2.loli.net/2024/03/14/iHQOxWjlLrwX5hJ.png" alt="image-20240314104823601"></p><p>这里看到<code>LC_ALL=C</code>，按照某个教程里的说法，<code>C</code>就是<code>POSIX</code>，是不支持中文显示的，修改为<code>zh_CN.utf8</code>或者<code>C.utf8</code>就可以了，实测都是有效的，似乎是排序上有一些不同</p><p><img src="https://s2.loli.net/2024/03/14/pf57C2rPzFxSuB6.png" alt="image-20240314105152076"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>关于各种<code>LC_*</code>变量以及<code>LANG</code>变量，看到的说法是<code>LC_ALL</code>是指定所有的字符集设置<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[LOCALE\]字符集设置 - Linux Guide (zj-linux-guide.readthedocs.io)](https://zj-linux-guide.readthedocs.io/zh-cn/latest/tool-install-configure/[LOCALE]字符集设置/)">[2]</span></a></sup>，看到很多教程上说让修改<code>LANG</code>变量，实际上试了一下是没用的</p><p>比如<code>LANG=C.utf8</code>且<code>LC_ALL=C</code>，可以看到还是显示不了中文：</p><p><img src="https://s2.loli.net/2024/03/14/KlYbREoxAsJItif.png" alt="image-20240314105437274"></p><p>包括把<code>LANG</code>设置为<code>zh_CN.utf8</code>也没有用：</p><p><img src="https://s2.loli.net/2024/03/14/xhdyP8tuzrWgfXA.png" alt="image-20240314105558850"></p><p>总的来说就是，只要<code>LC_ALL</code>是不支持中文字符的<code>C</code>，修改<code>LANG</code>就没有用，主要是<code>LC_ALL</code>变量的设置，因为设置了<code>LC_ALL</code>变量，其他的<code>LC_*</code>变量也都修改了，但是只设置<code>LANG</code>就会只修改<code>LANG</code>，如图修改<code>LC_ALL</code>：</p><p><img src="https://s2.loli.net/2024/03/14/zPKLpY5FTif9q2S.png" alt="image-20240314105921600"></p><p>and，很多教程里有的地方写的是<code>zh_CN.UTF-8</code>，有的是<code>zh_CN.utf-8</code>，测试了一下，设置<code>LC_ALL=zh_CN.UTF-8</code>也是有效的，但我觉得还是和<code>locale -a</code>的某一行输出（for example <code>zh_CN.utf8</code>）里保持一致可能会好一点，这一点可能需要去翻一翻文档去确认一下怎么设置最规范，但是我没有去翻</p><p>如果<code>locale -a</code>输出里没有自己需要的字符集，可以通过<code>dpkg-reconfigure locales</code>安装，如果显示没有<code>locales</code>，需要安装<code>locales</code><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[明眸如初 (zywvvd.com)](https://www.zywvvd.com/notes/system/linux/ubuntu-language-zh-cn/ubuntu-language-zh-cn/)">[1]</span></a></sup></p><h3 id="后后记"><a href="#后后记" class="headerlink" title="后后记"></a>后后记</h3><p>无语，忘记是什么时候的事，<code>.zshrc</code>里我自己添加了字符集的设置：</p><p><img src="https://s2.loli.net/2024/03/14/lBQZNAYcMexWpzU.png" alt="image-20240314111948828"></p><p>我就说为什么设置了<code>/etc/environment</code>没有用，总之，不管是<code>/etc/environment</code>还是<code>.zshrc</code>，能把<code>LC_ALL</code>变量设置成<code>zh_CN.utf8</code>而不是<code>C</code>就行</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.zywvvd.com/notes/system/linux/ubuntu-language-zh-cn/ubuntu-language-zh-cn/">明眸如初 (zywvvd.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zj-linux-guide.readthedocs.io/zh-cn/latest/tool-install-configure/[LOCALE]%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AE%BE%E7%BD%AE/">LOCALE]字符集设置 - Linux Guide (zj-linux-guide.readthedocs.io)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>（我讨厌CSDN，但是还是要放个引用在这里）<a href="https://blog.csdn.net/weixin_44455388/article/details/109092222">docker 容器中不支持中文的解决方法_docker locale-CSDN博客</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>沁园春-长沙</title>
    <link href="/2024/03/07/%E6%B2%81%E5%9B%AD%E6%98%A5-%E9%95%BF%E6%B2%99/"/>
    <url>/2024/03/07/%E6%B2%81%E5%9B%AD%E6%98%A5-%E9%95%BF%E6%B2%99/</url>
    
    <content type="html"><![CDATA[<p>（1925）毛泽东</p><hr><p>独立寒秋，湘江北去，橘子洲头。看万山红遍，层林尽染；漫江碧透，百舸争流。鹰击长空，鱼翔浅底，万类霜天竞自由。怅寥廓，问苍茫大地，谁主沉浮？</p><p>携来百侣曾游，忆往昔、峥嵘岁月稠。恰同学少年，风华正茂；书生意气，挥斥方遒。指点江山，激扬文字，粪土当年万户侯。曾记否，到中流击水，浪遏飞舟？</p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://www.ziyexing.com/maozedong/shici/mzd_shici_02.htm">http://www.ziyexing.com/maozedong/shici/mzd_shici_02.htm</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>八六子-倚危亭</title>
    <link href="/2024/03/07/%E5%85%AB%E5%85%AD%E5%AD%90-%E5%80%9A%E5%8D%B1%E4%BA%AD/"/>
    <url>/2024/03/07/%E5%85%AB%E5%85%AD%E5%AD%90-%E5%80%9A%E5%8D%B1%E4%BA%AD/</url>
    
    <content type="html"><![CDATA[<p>（宋）秦观</p><hr><p>倚危亭，恨如芳草，</p><p>萋萋刬尽还生。</p><p>念柳外青骢别后，水边红袂分时，</p><p>怆然暗惊。</p><p>无端天与娉婷，夜月一帘幽梦，</p><p>春风十里柔情。</p><p>怎奈向、欢娱渐随流水，</p><p>素弦声断，翠绡香减，</p><p>那堪片片飞花弄晚，蒙蒙残雨笼晴。</p><p>正销凝，黄鹂又啼数声。</p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://www.xinhuanet.com/politics/2017-03/02/c_129499433.htm">http://www.xinhuanet.com/politics/2017-03/02/c_129499433.htm</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>唐多令</title>
    <link href="/2024/03/07/%E5%94%90%E5%A4%9A%E4%BB%A4/"/>
    <url>/2024/03/07/%E5%94%90%E5%A4%9A%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>刘过</p><hr><p>安远楼小集，侑觞歌板之姬黄其姓者，乞词于龙洲道人，为赋此《唐多令》。同柳阜之、刘去非、石民瞻、周嘉仲、陈孟参、孟容。时八月五日也。</p><p>芦叶满汀洲，寒沙带浅流。二十年重过南楼。柳下系船犹未稳，能几日，又中秋。</p><p>黄鹤断矶头，故人曾到否？旧江山浑是新愁。欲买桂花同载酒，终不似，少年游</p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://baike.baidu.com/item/%E5%94%90%E5%A4%9A%E4%BB%A4%C2%B7%E8%8A%A6%E5%8F%B6%E6%BB%A1%E6%B1%80%E6%B4%B2/8464037">唐多令·芦叶满汀洲_百度百科 (baidu.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
